/**
 * @name Search node Angular library
 * @version v1.0.1
 * @link https://github.com/search-node/searchpt
 */
{"version":3,"sources":["search.js","controllers/search_box.js","controllers/search_result.js","directive/keyCodeDirective.js","directive/pagerDirective.js","providers/json.js","providers/search_node.js","services/communicator.js","services/search_proxy.js"],"names":["angular","module","element","document","ready","result","getElementById","bootstrap","box","controller","CONFIG","communicatorService","searchProxy","$scope","search","$emit","query","then","data","getFilters","filters","reason","console","error","hits","init","state","template","templates","text","provider","hasOwnProperty","intervals","dates","pager","copy","initialQueryText","pagerUpdated","size","page","$on","event","phase","this","$root","$$phase","$apply","searchClicked","searching","directive","restrict","link","$element","$attrs","bind","keyCode","which","Number","code","$eval","$event","replace","scope","changePage","prevPage","nextPage","max","$watch","pages","Math","ceil","i","push","templateUrl","service","$q","$http","get","res","tags","name","type","items","value","levels","self","deferred","defer","JSON","forEach","filter","xp","enabled","resolve","length","results","promise","CacheFactory","objectSize","obj","key","loadSocketIoScript","loadedSocketIo","script","createElement","readyState","onreadystatechange","onload","src","configuration","host","getElementsByTagName","appendChild","getSocket","socket","io","connect","token","force new connection","max reconnection attempts","Infinity","on","reject","undefined","auth","success","status","buildAggregationQuery","aggs","terms","field","parseFilters","j","buckets","bucket","count","doc_count","currentFilters","searchCache","id","maxAge","cacheExpire","deleteOnExpire","storageMode","getRawFilters","cachedFilters","emit","once","counts","put","message","searchQuery","index","filtered","match_all","fields","boost","multi_match","analyzer","queryFilter","bool","must","execution","term","from","extend","interval","range","gte","lte","to","should","config","gt","lt","log","stringify","cid","CryptoJS","MD5","toString","$rootScope","$window","rootScopes","args","listener","apply","$injector","encodeSearchQuery","parts","encodeURIComponent","filterParts","selected","join","intervalParts","dateParts","date","decodeSearhQuery","string","substr","split","part","subparts","decodeURIComponent","reduce","val","hash","window","location","force","forces","values"],"mappings":"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","file":"search.js","sourcesContent":["\n/**\n * @file\n * Defines the Angular JS application.\n */\n\n// Define the angular applications.\nangular.module('searchBoxApp', ['communicationService', 'searchAppConfig', 'angular-cache']);\nangular.module('searchResultApp', ['communicationService', 'searchAppConfig', 'ngSanitize']);\n\n/**\n * When the document is ready bootstrap the two applications.\n */\nangular.element(document).ready(function() {\n  \"use strict\";\n\n  // Bootstrap the search result area. This has to be booted first to ensure\n  // that it's ready for events from the search box bootstrap process.\n  var result = document.getElementById(\"searchResultApp\");\n  if (result) {\n    angular.bootstrap(result, ['searchResultApp']);\n  }\n\n  // Bootstrap search box.\n  var box = document.getElementById(\"searchBoxApp\");\n  if (box) {\n    angular.bootstrap(box, ['searchBoxApp']);\n  }\n});\n","/**\n * @file\n * This is the main controller for the application.\n *\n * It controls the search box and filters.\n */\n\nangular.module('searchBoxApp').controller('boxController', ['CONFIG', 'communicatorService', 'searchProxy', '$scope',\n  function (CONFIG, communicatorService, searchProxy, $scope) {\n    'use strict';\n\n    /**\n     * Execute the search and emit the results.\n     */\n    function search() {\n      // Send info to restults that a new search have started.\n      communicatorService.$emit('searching', {});\n\n      // Start the search request.\n      searchProxy.search($scope.query).then(\n        function (data) {\n          // Updated filters.\n          searchProxy.getFilters().then(\n            function (filters) {\n              $scope.filters = filters;\n            },\n            function (reason) {\n              console.error(reason);\n            }\n          );\n\n          // Send results.\n          communicatorService.$emit('hits', {\"hits\" : data});\n        },\n        function (reason) {\n          console.error(reason);\n        }\n      );\n    }\n\n    /**\n     * Initials this controller and configure the basic scope.\n     */\n    function init() {\n      // Get state from pervious searches.\n      var state = searchProxy.init();\n\n      // Get filters.\n      $scope.filters = state.filters;\n\n      // Set template to use.\n      $scope.template = CONFIG.templates.box;\n\n      // Init the query object.\n      $scope.query = {\n        'text': '',\n        'filters': {}\n      };\n\n      // Check if any intervals have been configured.\n      if (CONFIG.provider.hasOwnProperty('intervals')) {\n        $scope.intervals = CONFIG.provider.intervals;\n        $scope.query.intervals = {};\n      }\n\n      // Check if any dates have been configured.\n      if (CONFIG.provider.hasOwnProperty('dates')) {\n        $scope.dates = CONFIG.provider.dates;\n        $scope.query.dates = {};\n      }\n\n      // Check if any search query have been located from the hash tag.\n      if (state.hasOwnProperty('query')) {\n        // Query found in state, so execute that search.\n        $scope.query = state.query;\n        search();\n      }\n      else {\n        // Check if the provider supports an pager.\n        if (CONFIG.provider.hasOwnProperty('pager')) {\n          // Add pager information to the search query.\n          $scope.query.pager = angular.copy(CONFIG.provider.pager);\n        }\n\n        // Check if an inital search should be executed.\n        if (CONFIG.hasOwnProperty('initialQueryText')) {\n          $scope.query.text = angular.copy(CONFIG.initialQueryText);\n\n          // Execture the search.\n          search();\n        }\n        else {\n          // Get filters based on search content (maybe slow).\n          searchProxy.getFilters().then(\n            function (filters) {\n              $scope.filters = filters;\n            },\n            function (reason) {\n              console.error(reason);\n            }\n          );\n        }\n      }\n    }\n\n    /**\n     * Updated search based on pager.\n     */\n    function pagerUpdated(data) {\n      $scope.query.pager = {\n        'size': data.size,\n        'page': data.page\n      };\n      search();\n    }\n\n    /**\n     * Communication lister for pager changes from the search results\n     * application.\n     */\n    communicatorService.$on('pager', function (event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        pagerUpdated(data);\n      }\n      else {\n        $scope.$apply(function () {\n          pagerUpdated(data);\n        });\n      }\n    });\n\n    /**\n     * Search click handler.\n     *\n     * Simple wrapper for search that reest the pager before executing the\n     * searh.\n     */\n    $scope.searchClicked = function searchClicked() {\n      // Reset pager.\n      if ($scope.query.hasOwnProperty('pager')) {\n        $scope.query.pager = angular.copy(CONFIG.provider.pager);\n      }\n\n      search();\n    };\n\n    // Get set show on the road.\n    init();\n  }\n]);\n","/**\n * @file\n * This is the controller for the search result application.\n *\n * It simply updated the view when hits have been received.\n */\n\nangular.module('searchResultApp').controller('resultController', ['CONFIG', 'communicatorService', '$scope',\n  function (CONFIG, communicatorService, $scope) {\n    'use strict';\n\n    // Set template to use.\n    $scope.template = CONFIG.templates.result;\n\n    // Scope variable that can be used to make indications on the current\n    // process. E.g display spinner.\n    $scope.searching = false;\n\n    // Check if the provider supports an pager.\n    if (CONFIG.provider.hasOwnProperty('pager')) {\n      // Add pager information to the scope.\n      $scope.pager = angular.copy(CONFIG.provider.pager);\n    }\n\n    /**\n     * Update pager information.\n     */\n    $scope.search = function search() {\n      communicatorService.$emit('pager', $scope.pager);\n    };\n\n    /**\n     * Hanled search results hits from the search box application.\n     */\n    $scope.hits = [];\n    communicatorService.$on('hits', function (event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        $scope.hits = data.hits;\n        $scope.searching = false;\n      }\n      else {\n        $scope.$apply(function () {\n          $scope.hits = data.hits;\n          $scope.searching = false;\n        });\n      }\n    });\n\n    /**\n     * Hanled searching message, send when search is called.\n     */\n    communicatorService.$on('searching', function (event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        $scope.searching = true;\n      }\n      else {\n        $scope.$apply(function () {\n          $scope.searching = true;\n        });\n      }\n    });\n\n    /**\n     * Handled pager updates.\n     */\n    communicatorService.$on('pager', function (event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        $scope.pager = data;\n      }\n      else {\n        $scope.$apply(function () {\n          $scope.pager = data;\n        });\n      }\n    });\n  }\n]);\n","/**\n * @file\n * Directive to capture key codes.\n *\n * @see http://codepen.io/TheLarkInn/blog/angularjs-directive-labs-ngenterkey.\n */\nangular.module('searchBoxApp').directive('keyCode', function keyCode() {\n  'use strict';\n\n  return {\n    restrict: 'A',\n    link: function($scope, $element, $attrs) {\n      $element.bind(\"keypress\", function(event) {\n        var keyCode = event.which || event.keyCode;\n        if (keyCode === Number($attrs.code)) {\n          $scope.$apply(function() {\n            $scope.$eval($attrs.keyCode, { $event: event });\n          });\n        }\n      });\n    }\n  };\n});\n","/**\n * @file\n * Paging directive.\n */\n\n/**\n * Paging directive.\n */\nangular.module('searchResultApp').directive('searchPager', ['CONFIG',\n  function (CONFIG) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: true,\n      controller: function ($scope) {\n\n        /**\n         * Click handler to change page.\n         *\n         * @param page\n         */\n        $scope.changePage = function changePage(page) {\n          $scope.pager.page = page;\n          $scope.search();\n        };\n\n        $scope.prevPage = function prevPage() {\n          if ($scope.pager.page > 0) {\n            $scope.pager.page--;\n            $scope.search();\n          }\n        };\n\n        $scope.nextPage = function nextPage() {\n          if ($scope.pager.page < $scope.pager.max - 1) {\n            $scope.pager.page++;\n            $scope.search();\n          }\n        };\n\n        // Keep an any on changes in number of hits.\n        $scope.$watch('hits', function (hits) {\n          var hits = $scope.hits.hits;\n          var pages = [];\n          $scope.pager.max = 0;\n          if (hits > $scope.pager.size) {\n            $scope.pager.max = Math.ceil(hits / $scope.pager.size);\n            for (var i = 0; i < $scope.pager.max; i++) {\n              pages.push(i);\n            }\n          }\n          $scope.pager.pages = pages;\n        });\n      },\n      templateUrl: CONFIG.templates.pager\n    };\n  }\n]);\n","/**\n * @file\n * Dummy search provider that reads the search results from a JSON file.\n */\n\n/**\n * Search provider for JSON files.\n */\nangular.module('searchBoxApp').service('jsonProvider', ['CONFIG', '$q', '$http',\n  function (CONFIG, $q, $http) {\n    'use strict';\n\n    // Load JSON file based on configuration.\n    var data = [];\n    $http.get(CONFIG.provider.data)\n      .then(function(res){\n        data = res.data;\n      });\n\n    /**\n     * The filters available.\n     *\n     * @returns json array.\n     */\n    this.getFilters = function getFilters() {\n      return {\n        'tags': {\n          'name': 'Tags',\n          'type': 'and',\n          'items': [\n            {\n              'name': 'Angular',\n              'value': 'angular'\n            },\n            {\n              'name': 'Developer',\n              'value': 'developer'\n            },\n            {\n              'name': 'Javascript',\n              'value': 'javascript'\n            },\n            {\n              'name': 'Chrome',\n              'value': 'chrome'\n            }\n          ]\n        },\n        'levels':{\n          'name': 'Levels (or)',\n          'type': 'or',\n          'items': [\n            {\n              'name': 'First',\n              'value': 1\n            },\n            {\n              'name': 'Second',\n              'value': 2\n            },\n            {\n              'name': 'Third',\n              'value': 3\n            },\n            {\n              'name': 'Fourth',\n              'value': 4\n            }\n          ]\n        }\n      };\n    };\n\n    /**\n     * Search function to query the json data.\n     *\n     * @param query\n     *   The query parameters to search\n     *\n     * @returns {Array}\n     *   The hits found.\n     */\n    this.search = function search(query) {\n      var self = this;\n      var hits = angular.copy(data);\n\n      var deferred = $q.defer();\n\n      // Search title.\n      if (query.text !== '') {\n        hits = JSON.search(data, '//*[contains(title, \"' + query.text + '\")]');\n      }\n\n      // Search filters.\n      angular.forEach(query.filters, function (filter, name) {\n        // Get search type 'or' or 'and'.\n        var type = self.getFilters();\n        var xp = false;\n\n        angular.forEach(filter, function (enabled, value) {\n          if (enabled) {\n            if (type === 'or') {\n              // Or type search needs to build and xpath expression for all items\n              // in the filter.\n              if (xp === false) {\n                xp = '//*[' + name + '=\"' + value + '\"]';\n              }\n              else {\n                xp += '|//*[' + name + '=\"' + value + '\"]';\n              }\n            }\n            else {\n              // \"And\" type search simply limites the results.\n              hits = JSON.search(hits, '//*[' + name + '=\"' + value + '\"]');\n            }\n          }\n        });\n\n        // After all other search apply the \"or\" search expression.\n        if (type === 'or' && xp) {\n          hits = JSON.search(hits, xp);\n        }\n      });\n\n      // This may seem strange, but it's to keep up with the way search node\n      // works. So it makes sens to return an resolve the promise just after\n      // each other.\n      deferred.resolve({\n        'hits': hits.length,\n        'results': hits\n      });\n\n      return deferred.promise;\n    };\n  }\n]);\n","/**\n * @file\n * Search provider for the search node framework.\n */\n\nangular.module('searchBoxApp').service('searchNodeProvider', ['CONFIG', '$q', '$http', 'CacheFactory',\n  function (CONFIG, $q, $http, CacheFactory) {\n    'use strict';\n\n    // Configuration options.\n    var configuration = CONFIG.provider;\n\n    // Search node connection handling.\n    var socket;\n    var loadedSocketIo = false;\n    var token = null;\n\n    // Create cache object.\n    var searchCache = new CacheFactory('searchCache' + CONFIG.id, {\n      maxAge: configuration.cacheExpire * 1000,\n      deleteOnExpire: 'aggressive',\n      storageMode: 'localStorage'\n    });\n\n    // Holder for the latest search query filters.\n    var currentFilters;\n\n    /**\n     * Find the size of given object.\n     *\n     * @return int\n     *   The size of the object or 0 if empty.\n     */\n    function objectSize(obj) {\n      var size = 0;\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          size++;\n        }\n      }\n\n      return size;\n    }\n\n    /**\n     * Load the socket.io library provided by the search node.\n     *\n     * @return {promise}\n     *   An promise is return that will be resolved on library loaded.\n     */\n    function loadSocketIoScript() {\n      var deferred = $q.defer();\n\n      // Check if it have been loaded.\n      if (!loadedSocketIo) {\n        // Create script element.\n        var script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n\n        // Add event handlers for the library loaded.\n        if (script.readyState) {\n          // Handle internet explore.\n          script.onreadystatechange = function () {\n            if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n              script.onreadystatechange = null;\n              loadedSocketIo = true;\n              deferred.resolve();\n            }\n          };\n        } else {\n          // All other browsers.\n          script.onload = function () {\n            loadedSocketIo = true;\n            deferred.resolve();\n          };\n        }\n\n        // Add the script and add it to the dom to load it.\n        script.src = configuration.host + \"/socket.io/socket.io.js\";\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n      }\n      else {\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Connect to the web-socket.\n     *\n     * @param deferred\n     *   The is a deferred object that should be resolved on connection.\n     */\n    function getSocket(deferred) {\n      // Load the socket library.\n      loadSocketIoScript().then(function () {\n        // Get connected to the server.\n        socket = io.connect(configuration.host, {\n          'query': 'token=' + token,\n          'force new connection': true,\n          'max reconnection attempts': Infinity\n        });\n\n        // Handle error events.\n        socket.on('error', function (reason) {\n          console.error(reason, 'Search socket error.');\n          deferred.reject(reason);\n        });\n\n        socket.on('connect', function () {\n          deferred.resolve('Connected to the server.');\n        });\n\n        // Handle disconnect event (fires when disconnected or connection fails).\n        socket.on('disconnect', function (reason) {\n          // @todo: re-connection is automatically handled by socket.io library,\n          // but we might need to stop sending request until reconnection or the\n          // request will be queued and send all at once... which could give some\n          // strange side effects in the application if not handled.\n        });\n      });\n    }\n\n    /**\n     * Create the connection to the server.\n     *\n     * @return {promise}\n     *   An promise is return that will be resolved on connection.\n     */\n    function connect() {\n      // Try to connect to the server if not already connected.\n      var deferred = $q.defer();\n\n      if (socket === undefined) {\n        if (token !== null) {\n          getSocket(deferred);\n        }\n        else {\n          $http.get(configuration.auth)\n            .success(function (data) {\n              token = data.token;\n              getSocket(deferred);\n            })\n            .error(function (data, status) {\n              console.error(data, 'Authentication (search) to search node failed (' + status + ')');\n              deferred.reject(status);\n            });\n        }\n      }\n      else {\n        deferred.resolve('Connected to the server.');\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Builds aggregation query based on filters.\n     *\n     * @param filters\n     */\n    function buildAggregationQuery(filters) {\n      // Basic aggregation query.\n      var query = {\n        'aggs': {}\n      };\n\n      // Extend query with filter fields.\n      for (var i = 0; i < filters.length; i++) {\n        var filter = filters[i];\n        query.aggs[filter.name] = {\n          \"terms\": {\n            'field': filter.field\n          }\n        };\n      }\n\n      return query;\n    }\n\n    /**\n     * Parse filter configuration and search aggregations.\n     *\n     * Merge result with filters configuration as not all terms may have\n     * been used in the content and then not in found in the search\n     * node.\n     *\n     * @param aggs\n     *\n     * @returns {{}}\n     */\n    function parseFilters(aggs) {\n      var results = {};\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        var filters = CONFIG.provider.filters;\n\n        for (var i = 0; i < filters.length; i++) {\n          var filter = angular.copy(filters[i]);\n\n          // Set basic filter with counts.\n          results[filter.field] = {\n            'name': filter.name,\n            'items': filter.terms\n          };\n\n          // Run through counts and update the filter.\n          if (objectSize(aggs) !== 0) {\n            for (var j = 0; j < aggs[filter.name].buckets.length; j++) {\n              var bucket = aggs[filter.name].buckets[j];\n              if (results[filter.field].items.hasOwnProperty(bucket.key)) {\n                results[filter.field].items[bucket.key].count = Number(bucket.doc_count);\n              }\n              else {\n                console.error('Filter value don\\'t match configuration: ' + filter.field + ' -> ' + bucket.key);\n              }\n            }\n          }\n        }\n      }\n\n      return results;\n    }\n    /**\n     * Get the list of available filters not parsed with search results.\n     *\n     * @return array\n     *  The filters from the configuration.\n     */\n    this.getRawFilters = function getRawFilters() {\n      var result = {};\n\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        var filters = CONFIG.provider.filters;\n        for (var i = 0; i < filters.length; i++) {\n\n          // Set basic filter with counts.\n          result[filters[i].field] = {\n            'name': filters[i].name,\n            'items': filters[i].terms\n          };\n        }\n      }\n\n      return result;\n    };\n\n    /**\n     * Get the list of available filters.\n     *\n     * @PLAN:\n     *   Check if latest search return aggregations, if not use the configuration\n     *   to search the get all available aggregations.\n     *\n     *   Merge it with configuration to ensure that all possible filters are\n     *   displayed with count.\n     */\n    this.getFilters = function getFilters() {\n      var deferred = $q.defer();\n\n      // Get filters from configuration.\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        var filters = CONFIG.provider.filters;\n\n        // If no search have been executed yet, load the default filters across\n        // all indexed data.\n        if (currentFilters === undefined) {\n          // Check if filters are cached.\n          var cachedFilters = searchCache.get('filters');\n          if (cachedFilters !== undefined) {\n            // Store current filters.\n            currentFilters = cachedFilters;\n\n            // Return the result.\n            deferred.resolve(angular.copy(currentFilters));\n          }\n          else {\n            // Get the query.\n            var query = buildAggregationQuery(filters);\n\n            /**\n             * @TODO: Added forced fields and other search options.\n             */\n\n            // Send the request to search node.\n            connect().then(function () {\n              socket.emit('count', query);\n              socket.once('counts', function (counts) {\n                var results = parseFilters(counts);\n\n                // Store initials filters in cache.\n                searchCache.put('filters', results);\n\n                // Store current filters.\n                currentFilters = results;\n\n                // Return the result.\n                deferred.resolve(results);\n              });\n\n              // Catch search errors.\n              socket.once('searchError', function (error) {\n                console.error('Search error', error.message);\n                deferred.reject(error.message);\n              });\n            });\n          }\n        }\n        else {\n          // Return the result.\n          deferred.resolve(angular.copy(currentFilters));\n        }\n      }\n      else {\n        deferred.resolve({});\n      }\n\n      return deferred.promise;\n    };\n\n    /**\n     * Execute search query.\n     *\n     * @param searchQuery\n     * @returns {*}\n     */\n    this.search = function search(searchQuery) {\n      var deferred = $q.defer();\n\n      // Build default match all search query.\n      var query = {\n        \"index\": configuration.index,\n        \"query\": {\n          \"filtered\": {\n            \"query\" : {\n              \"match_all\": {}\n            }\n          }\n        }\n      };\n\n      // Text given build field search query.\n      // The analyser ensures that we match the who text string sent not part\n      // of.\n      if (searchQuery.text !== undefined && searchQuery.text !== '') {\n        var fields = configuration.fields;\n        // Check if boost exist for the fields.\n        if (configuration.hasOwnProperty('boost') && objectSize(configuration.boost)) {\n          // Add boost to fields.\n          for (var i in fields) {\n            if (configuration.boost.hasOwnProperty(fields[i])) {\n              fields[i] = fields[i] + '^' + configuration.boost[fields[i]];\n            }\n          }\n        }\n\n        query.query.filtered.query = {\n          \"multi_match\": {\n            \"query\": searchQuery.text,\n            \"fields\": fields,\n            \"analyzer\": 'string_search'\n          }\n        };\n      }\n\n      // Add filter.\n      if (searchQuery.hasOwnProperty('filters')) {\n        var filters = angular.copy(searchQuery.filters);\n\n        // Build query filter.\n        var queryFilter =  {\n          \"bool\": {\n            \"must\": [ ]\n          }\n        };\n\n        // Load over all filters.\n        for (var field in filters) {\n          /**\n           * @TODO: Needs to get information from configuration about execution\n           *        type?\n           */\n          var terms = {\n            \"execution\" : \"and\"\n          };\n\n          terms[field] = [];\n          for (var term in filters[field]) {\n            // Check the the term is \"true\" selected.\n            if (filters[field][term]) {\n              terms[field].push(term);\n            }\n          }\n\n          if (terms[field].length) {\n            queryFilter.bool.must.push({ \"terms\": angular.copy(terms) });\n          }\n        }\n\n        // Add the query filter if filled out.\n        if (queryFilter.bool.must.length) {\n          query.query.filtered.filter = queryFilter;\n        }\n      }\n\n      // Add pager to the query.\n      if (searchQuery.hasOwnProperty('pager')) {\n        query.size = searchQuery.pager.size;\n        query.from = searchQuery.pager.page * searchQuery.pager.size;\n      }\n\n      // Check if aggregations/filters counts should be used.\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        // Get the query.\n        var aggs = buildAggregationQuery(CONFIG.provider.filters);\n        angular.extend(query, aggs);\n      }\n\n      // Add range/interval search to the query.\n      if (searchQuery.hasOwnProperty('intervals')) {\n        // Check if any filters have been defined.\n        if (!query.query.filtered.hasOwnProperty('filter')) {\n          query.query.filtered.filter = {\n            \"bool\": {\n              \"must\": [ ]\n            }\n          };\n        }\n\n        // Loop over the intervals and build range terms.\n        for (var field in searchQuery.intervals) {\n          var interval = {\n            \"range\": {}\n          };\n          interval.range[field] = {\n            \"gte\": searchQuery.intervals[field].from,\n            \"lte\": searchQuery.intervals[field].to\n          };\n          query.query.filtered.filter.bool.must.push(interval);\n        }\n      }\n\n      // Add date interval search.\n      if (searchQuery.hasOwnProperty('dates')) {\n        // Check if any filters have been defined.\n        if (!query.query.filtered.hasOwnProperty('filter')) {\n          query.query.filtered.filter = {\n            \"bool\": {\n              \"should\": [ ]\n            }\n          };\n        }\n        else {\n          query.query.filtered.filter.bool.should = [];\n        }\n\n        // Loop over the intervals and build range terms.\n        for (var field in searchQuery.dates) {\n          var config = configuration.dates[field];\n          var template = {\n            \"bool\": {\n              \"must\": [\n                {\n                  \"range\": {}\n                },\n                {\n                  \"range\": {}\n                }\n              ]\n            }\n          };\n\n          // Overlap start of the interval.\n          template.bool.must[0].range[config.from] = {\n            \"lte\": searchQuery.dates[field].from\n          };\n          template.bool.must[1].range[config.to] = {\n            \"gt\": searchQuery.dates[field].from\n          };\n          query.query.filtered.filter.bool.should.push(angular.copy(template));\n\n          // Overlap end of the interval.\n          template.bool.must[0].range[config.from] = {\n            \"lt\": searchQuery.dates[field].to\n          };\n          template.bool.must[1].range[config.to] = {\n            \"gte\": searchQuery.dates[field].to\n          };\n          query.query.filtered.filter.bool.should.push(angular.copy(template));\n\n          // Overlap both endes of the interval.\n          template.bool.must[0].range[config.from] = {\n            \"gte\": searchQuery.dates[field].from\n          };\n          template.bool.must[1].range[config.to] = {\n            \"lte\": searchQuery.dates[field].to\n          };\n          query.query.filtered.filter.bool.should.push(angular.copy(template));\n        }\n      }\n\n      console.log(JSON.stringify(query));\n\n      // Create cache key based on the finale search query.\n      var cid = CryptoJS.MD5(JSON.stringify(query)).toString();\n\n      // Check cache for hits.\n      var hits = searchCache.get(cid);\n      if (hits !== undefined) {\n        // Update filters cache.\n        if (hits.hasOwnProperty('aggs')) {\n          currentFilters = parseFilters(angular.copy(hits.aggs));\n        }\n\n        deferred.resolve(hits);\n      }\n      else {\n        connect().then(function () {\n          socket.emit('search', query);\n          socket.once('result', function (hits) {\n\n            // Update cache filters cache.\n            if (hits.hasOwnProperty('aggs')) {\n              // Store current filters.\n              currentFilters = parseFilters(angular.copy(hits.aggs));\n            }\n\n            // Save hits in cache.\n            searchCache.put(cid, hits);\n\n            deferred.resolve(hits);\n          });\n\n          // Catch search errors.\n          socket.once('searchError', function (error) {\n            console.error('Search error', error.message);\n            deferred.reject(error.message);\n          });\n        });\n      }\n\n      return deferred.promise;\n    };\n  }\n]);\n","/**\n * @file\n * Service to communication between search box and search result applications.\n */\n\nangular.module('communicationService', [])\n  .service('communicatorService', function($rootScope, $window){\n    'use strict';\n\n    // Store rootScopes for each service user.\n    $window.rootScopes = $window.rootScopes || [];\n    $window.rootScopes.push($rootScope);\n\n    /**\n     * Wrapper for emitting events to all root scopes.\n     *\n     * @param name\n     *   Event name\n     * @param args\n     *   Event arguments.\n     */\n    this.$emit = function emit(name, args) {\n      angular.forEach($window.rootScopes, function(scope) {\n        scope.$emit(name, args);\n      });\n    };\n\n    /**\n     * Wrapper to attach event listeners to the current root scope.\n     *\n     * @param name\n     *   Event name.\n     * @param listener\n     *   The listener to call on event.\n     */\n    this.$on = function on(name, listener) {\n      $rootScope.$on(name, function (event, message) {\n        listener.apply($rootScope, [event, message]);\n      });\n    };\n  });","/**\n * @file\n * Search proxy.\n *\n * Allows the framework to use different search back-ends based on\n * configuration settings.\n */\n\n/**\n * Search proxy is used to send search requests to the configured provide.\n */\nangular.module('searchBoxApp').service('searchProxy', ['CONFIG', 'communicatorService', '$injector',\n  function (CONFIG, communicatorService, $injector) {\n    'use strict';\n\n    // Load provider based on configuration.\n    var provider = $injector.get(CONFIG.provider.service);\n\n    /**\n     * Find the size of given object.\n     *\n     * @return int\n     *   The size of the object or 0 if empty.\n     */\n    function objectSize(obj) {\n      var size = 0;\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          size++;\n        }\n      }\n\n      return size;\n    }\n\n    /**\n     * Encode the query object into a string.\n     *\n     * @param query\n     *  The query object.\n     *\n     * @return string\n     *  The encode string that can be used as hash tag in url.\n     */\n    function encodeSearchQuery(query) {\n      var parts = [];\n\n      // Search text.\n      if (query.hasOwnProperty('text') && query.text.length !== 0) {\n        parts.push('text=' + encodeURIComponent(query.text));\n      }\n\n      // Filters.\n      if (query.hasOwnProperty('filters') && objectSize(query.filters) !== 0) {\n        var filterParts = [];\n        for (var field in query.filters) {\n          var selected = [];\n          for (var filter in query.filters[field]) {\n            if (query.filters[field][filter] === true) {\n              selected.push(filter);\n            }\n          }\n\n          // Only add the filter if filter have selections.\n          if (selected.length) {\n            filterParts.push(field + ':' + selected.join(';'));\n          }\n        }\n\n        // Only encode filters if any have be selected.\n        if (filterParts.length) {\n          parts.push('filters=' + encodeURIComponent(filterParts.join('?')));\n        }\n      }\n\n      // Interval search.\n      if (query.hasOwnProperty('intervals') && objectSize(query.intervals) !== 0) {\n        var intervalParts = [];\n        for (var field in query.intervals) {\n          var interval = query.intervals[field];\n          intervalParts.push(field + ';' + interval.from + ';' + interval.to);\n        }\n        parts.push('intervals=' + encodeURIComponent(intervalParts.join('?')));\n      }\n\n      // Date search.\n      if (query.hasOwnProperty('dates') && objectSize(query.dates) !== 0) {\n        // @TODO: This is the same as for intervals. Refactor into function or\n        // loop over type.\n        var dateParts = [];\n        for (var field in query.dates) {\n            var date = query.dates[field];\n          dateParts.push(field + ';' + date.from + ';' + date.to);\n        }\n        parts.push('dates=' + encodeURIComponent(dateParts.join('?')));\n      }\n\n      // Pager page.\n      if (query.hasOwnProperty('pager')) {\n        parts.push('pager=' + query.pager.page + ':' + query.pager.size);\n      }\n\n      return parts.join('&');\n    }\n\n    /**\n     * Decode the hash tag string into search query object.\n     *\n     * @param string\n     *  The encode string that can be used as hash tag in url.\n     *\n     * @return obje'\n     *  Search query object.\n     */\n    function decodeSearhQuery(string) {\n      var query = {};\n\n      // Get parts.\n      var parts = string.substr(2).split('&');\n      for (var part in parts) {\n        var subparts = parts[part].split('=');\n        switch (subparts[0]) {\n          case 'text':\n            query.text = decodeURIComponent(subparts[1]);\n            break;\n\n          case 'filters':\n            var filters = decodeURIComponent(subparts[1]).split('?');\n            if (filters.length) {\n              query.filters = {};\n              for (var i in filters) {\n                var filter = filters[i].split(':');\n                // Reduce the array values into an object.\n                query.filters[filter[0]] = filter[1].split(';').reduce(function (obj, val, index) {\n                  obj[val] = true;\n                  return obj;\n                }, {});\n              }\n            }\n            break;\n\n          case 'intervals':\n            var intervals = decodeURIComponent(subparts[1]).split('?');\n            if (intervals.length) {\n              query.intervals = {};\n              for (var i in intervals) {\n                var interval = intervals[i].split(';');\n                query.intervals[interval[0]] = {\n                  'from': interval[1],\n                  'to': interval[2]\n                };\n              }\n            }\n            break;\n\n          // @TODO: This is the same as for intervals. Refactor into function.\n          case 'dates':\n            var dates = decodeURIComponent(subparts[1]).split('?');\n            if (dates.length) {\n              query.dates = {};\n              for (var i in dates) {\n                var date = dates[i].split(';');\n                query.dates[date[0]] = {\n                  'from': date[1],\n                  'to': date[2]\n                };\n              }\n            }\n            break;\n\n          case 'pager':\n            var pager = subparts[1].split(':');\n            query.pager = {\n              'page': Number(pager[0]),\n              'size': Number(pager[1])\n            };\n            break;\n\n          default:\n            console.error('Decoding of search hash has unknown parts - ' + subparts[0]);\n        }\n      }\n\n      return query;\n    }\n\n    /**\n     * Get basic information about the search state.\n     *\n     * @return object\n     *  The last query form hash tag and default filters.\n     */\n    this.init = function init() {\n      var state = {\n        'filters': this.getRawFilters()\n      };\n\n      var hash = window.location.hash;\n      if (hash.length > 2) {\n         state.query = decodeSearhQuery(hash);\n      }\n\n      return state;\n    };\n\n    /**\n     * Search the provider loaded.\n     *\n     * This simply forwards the search request to the provider loaded.\n     *\n     * @param query\n     *   The search query.\n     *\n     * @returns {Number|*|Object}\n     *   The search result.\n     */\n    this.search = function search(searchQuery) {\n      // Ensure that forced fields and other changes are not refelected in the\n      // UI.\n      var query = angular.copy(searchQuery);\n\n      // Ensure that intervals is set and have both from and to values.\n      if (CONFIG.provider.hasOwnProperty('intervals') && CONFIG.provider.intervals.length) {\n        if (query.hasOwnProperty('intervals')) {\n          for (var field in query.intervals) {\n            // Check if both from and to exists.\n            if ((query.intervals[field].hasOwnProperty('from') && query.intervals[field].from !== '') &&\n                (query.intervals[field].hasOwnProperty('to') && query.intervals[field].to !== '')) {\n              // It did\n              continue;\n            }\n            else {\n              // Remove invalided interval.\n              delete query.intervals[field];\n            }\n          }\n        }\n      }\n      else {\n        // Configuration don't have intervals.\n        if (query.hasOwnProperty('intervals')) {\n          delete query.intervals;\n        }\n      }\n\n      // Keep tack of the current URL.\n      window.location.hash = encodeSearchQuery(query);\n\n      // Force search filters form configuraion (predefined filters).\n      if (CONFIG.provider.hasOwnProperty('force') && CONFIG.provider.force.length) {\n        // If the query have been loaded form the URL, it may not have any\n        // selected filters, hence no filters on the query object.\n        if (!query.hasOwnProperty('filters')) {\n          query.filters = {};\n        }\n        var forces = CONFIG.provider.force;\n        for (var i in forces) {\n          var force = forces[i];\n          // Check if user have selected filter, if not init it.\n          if (!query.filters.hasOwnProperty(force.field)) {\n            query.filters[force.field] = {};\n          }\n\n          // Insert the forced field values.\n          for (var j in force.values) {\n            query.filters[force.field][force.values[j]] = true;\n          }\n        }\n      }\n\n      return provider.search(query);\n    };\n\n    /**\n     * Get filters provided by configuraion.\n     *\n     * @returns json\n     */\n    this.getRawFilters = function getRawFilters() {\n      return provider.getRawFilters();\n    };\n\n    /**\n     * Get filters provided by search engine used.\n     *\n     * @returns json\n     */\n    this.getFilters = function getFilters() {\n      return provider.getFilters();\n    };\n  }\n]);\n"],"sourceRoot":"/source/"}