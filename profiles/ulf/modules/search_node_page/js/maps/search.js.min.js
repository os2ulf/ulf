/**
 * @name Search node Angular library
 * @version v1.2.1
 * @link https://github.com/search-node/searchpt
 */
{"version":3,"sources":["search.js","controllers/boxController.js","controllers/resultController.js","directive/keyCodeDirective.js","directive/pagerDirective.js","providers/jsonProvider.js","providers/searchNodeProvider.js","services/communicationService.js","services/searchProxyService.js"],"names":["angular","module","element","document","ready","result","getElementById","bootstrap","console","error","box","controller","CONFIG","communicatorService","searchProxyService","$scope","search","$emit","query","then","data","getFilters","filters","reason","hits","init","state","getState","template","templates","text","provider","hasOwnProperty","intervals","dates","pager","copy","initialQueryText","pagerUpdated","size","page","$on","event","phase","this","$root","$$phase","$apply","searchClicked","searching","directive","restrict","link","$element","$attrs","bind","keyCode","which","Number","code","$eval","$event","replace","scope","changePage","prevPage","nextPage","max","$watch","pages","Math","ceil","i","push","templateUrl","service","$q","$http","get","res","tags","name","type","items","value","levels","self","deferred","defer","JSON","forEach","filter","xp","enabled","resolve","length","results","promise","CacheFactory","countProperties","obj","key","loadSocketIoScript","loadedSocketIo","script","createElement","readyState","onreadystatechange","onload","src","configuration","host","getElementsByTagName","appendChild","getSocket","socket","io","connect","token","force new connection","max reconnection attempts","Infinity","on","reject","undefined","auth","success","status","buildAggregationQuery","aggs","filterType","taxonomyFilters","field","terms","booleanFilters","parseFilters","taxonomy","boolean","filterConfig","j","buckets","bucket","count","doc_count","buildBooleanFilters","searchCache","id","maxAge","cacheExpire","deleteOnExpire","storageMode","currentFilters","getRawFilters","cachedFilters","emit","once","counts","put","message","searchQuery","index","filtered","match_all","fields","boost","multi_match","analyzer","sort","order","queryFilter","bool","must","execution","term","from","extend","interval","range","gte","lte","to","should","config","gt","lt","cid","CryptoJS","MD5","stringify","toString","$rootScope","$window","rootScopes","args","listener","apply","$injector","encodeSearchQuery","parts","encodeURIComponent","filterParts","selected","join","intervalParts","dateParts","date","decodeSearchQuery","string","substr","split","part","subParts","decodeURIComponent","indexOf","str","slice","reduce","val","hash","window","location","force","forces","values"],"mappings":"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","file":"search.js","sourcesContent":["\n/**\n * @file\n * Defines the Angular JS application.\n */\n\n// Define the angular applications.\nangular.module('searchBoxApp', ['communicationService', 'searchAppConfig', 'angular-cache']);\nangular.module('searchResultApp', ['communicationService', 'searchAppConfig', 'ngSanitize']);\n\n/**\n * When the document is ready bootstrap the two applications.\n */\nangular.element(document).ready(function ready() {\n  \"use strict\";\n\n  // Bootstrap the search result area. This has to be booted first to ensure\n  // that it's ready for events from the search box bootstrap process.\n  var result = document.getElementById(\"searchResultApp\");\n  if (result) {\n    angular.bootstrap(result, ['searchResultApp']);\n  }\n  else {\n    console.error('Unable to bootstrap searchResultApp. Missing HTML tag with id \"searchResultApp\"');\n  }\n\n  // Bootstrap search box.\n  var box = document.getElementById(\"searchBoxApp\");\n  if (box) {\n    angular.bootstrap(box, ['searchBoxApp']);\n  }\n  else {\n    console.error('Unable to bootstrap searchBoxApp. Missing HTML tag with id \"searchBoxApp\"');\n  }\n});\n","/**\n * @file\n * This is the main controller for the application.\n *\n * It controls the search box and filters.\n */\n\nangular.module('searchBoxApp').controller('boxController', ['CONFIG', 'communicatorService', 'searchProxyService', '$scope',\n  function (CONFIG, communicatorService, searchProxyService, $scope) {\n    'use strict';\n\n    /**\n     * Execute the search and emit the results.\n     */\n    function search() {\n      // Send info to results that a new search have started.\n      communicatorService.$emit('searching', {});\n\n      // Start the search request.\n      searchProxyService.search($scope.query).then(\n        function (data) {\n          // Updated filters.\n          searchProxyService.getFilters().then(\n            function (filters) {\n              $scope.filters = filters;\n            },\n            function (reason) {\n              console.error(reason);\n            }\n          );\n\n          // Send results.\n          communicatorService.$emit('hits', {\"hits\": data});\n        },\n        function (reason) {\n          console.error(reason);\n        }\n      );\n    }\n\n    /**\n     * Initialize the controller and configure the basic scope.\n     */\n    function init() {\n      // Get state from previous search.\n      var state = searchProxyService.getState();\n\n      // Get filters.\n      $scope.filters = state.filters;\n\n      // Set template to use.\n      $scope.template = CONFIG.templates.box;\n\n      // Init the query object.\n      $scope.query = {\n        'text': '',\n        'filters': {}\n      };\n\n      // Check if any intervals have been configured.\n      if (CONFIG.provider.hasOwnProperty('intervals')) {\n        $scope.intervals = CONFIG.provider.intervals;\n        $scope.query.intervals = {};\n      }\n\n      // Check if any dates have been configured.\n      if (CONFIG.provider.hasOwnProperty('dates')) {\n        $scope.dates = CONFIG.provider.dates;\n        $scope.query.dates = {};\n      }\n\n      // Check if any search query have been located from the hash tag.\n      if (state.hasOwnProperty('query')) {\n        // Query found in state, so execute that search.\n        $scope.query = state.query;\n        search();\n      }\n      else {\n        // Check if the provider supports an pager.\n        if (CONFIG.provider.hasOwnProperty('pager')) {\n          // Add pager information to the search query.\n          $scope.query.pager = angular.copy(CONFIG.provider.pager);\n        }\n\n        // Check if an initial search should be executed.\n        if (CONFIG.hasOwnProperty('initialQueryText')) {\n          $scope.query.text = angular.copy(CONFIG.initialQueryText);\n\n          // Execute the search.\n          search();\n        }\n        else {\n          // Get filters based on search content (maybe slow).\n          searchProxyService.getFilters().then(\n            function (filters) {\n              $scope.filters = filters;\n            },\n            function (reason) {\n              console.error(reason);\n            }\n          );\n        }\n      }\n    }\n\n    /**\n     * Updated search based on pager.\n     */\n    function pagerUpdated(data) {\n      $scope.query.pager = {\n        'size': data.size,\n        'page': data.page\n      };\n      search();\n    }\n\n    /**\n     * Communication listener for pager changes from the search results\n     * application.\n     */\n    communicatorService.$on('pager', function (event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        pagerUpdated(data);\n      }\n      else {\n        $scope.$apply(function () {\n          pagerUpdated(data);\n        });\n      }\n    });\n\n    /**\n     * Search click handler.\n     *\n     * Simple wrapper for search that resets the pager before executing the\n     * search.\n     */\n    $scope.searchClicked = function searchClicked() {\n      // Reset pager.\n      if ($scope.query.hasOwnProperty('pager')) {\n        $scope.query.pager = angular.copy(CONFIG.provider.pager);\n      }\n\n      search();\n    };\n\n    // Get the show on the road.\n    init();\n  }\n]);\n","/**\n * @file\n * This is the controller for the search result application.\n *\n * It simply updates the view when hits have been received.\n */\n\nangular.module('searchResultApp').controller('resultController', ['CONFIG', 'communicatorService', '$scope',\n  function (CONFIG, communicatorService, $scope) {\n    'use strict';\n\n    // Set template to use.\n    $scope.template = CONFIG.templates.result;\n\n    // Scope variable that can be used to make indications on the current\n    // process. E.g display spinner.\n    $scope.searching = false;\n\n    // Check if the provider supports an pager.\n    if (CONFIG.provider.hasOwnProperty('pager')) {\n      // Add pager information to the scope.\n      $scope.pager = angular.copy(CONFIG.provider.pager);\n    }\n\n    /**\n     * Update pager information.\n     */\n    $scope.search = function search() {\n      communicatorService.$emit('pager', $scope.pager);\n    };\n\n    /**\n     * Hanled search results hits from the search box application.\n     */\n    $scope.hits = [];\n    communicatorService.$on('hits', function onHits(event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        $scope.hits = data.hits;\n        $scope.searching = false;\n      }\n      else {\n        $scope.$apply(function () {\n          $scope.hits = data.hits;\n          $scope.searching = false;\n        });\n      }\n    });\n\n    /**\n     * Hanled searching message, send when search is called.\n     */\n    communicatorService.$on('searching', function onSearching(event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        $scope.searching = true;\n      }\n      else {\n        $scope.$apply(function () {\n          $scope.searching = true;\n        });\n      }\n    });\n\n    /**\n     * Handled pager updates.\n     */\n    communicatorService.$on('pager', function onPager(event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        $scope.pager = data;\n      }\n      else {\n        $scope.$apply(function () {\n          $scope.pager = data;\n        });\n      }\n    });\n  }\n]);\n","/**\n * @file\n * Directive to capture key codes.\n *\n * @see http://codepen.io/TheLarkInn/blog/angularjs-directive-labs-ngenterkey.\n *\n * Use by adding html attributes:\n *   data-code=\"key_code_to_capture\"\n *   data-key-code=\"function_to_call()\"\n */\nangular.module('searchBoxApp').directive('keyCode', function keyCode() {\n  'use strict';\n\n  return {\n    restrict: 'A',\n    link: function($scope, $element, $attrs) {\n      $element.bind(\"keypress\", function(event) {\n        var keyCode = event.which || event.keyCode;\n        if (keyCode === Number($attrs.code)) {\n          $scope.$apply(function() {\n            $scope.$eval($attrs.keyCode, { $event: event });\n          });\n        }\n      });\n    }\n  };\n});\n","/**\n * @file\n * Paging directive.\n */\n\n/**\n * Paging directive.\n *\n * @TODO: Review - maybe use the newer version from https://github.com/aroskanalen/admin/tree/development/web/app/shared/elements/pager\n */\nangular.module('searchResultApp').directive('searchPager', ['CONFIG',\n  function (CONFIG) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: true,\n      controller: function ($scope) {\n\n        /**\n         * Click handler to change page.\n         *\n         * @param page\n         */\n        $scope.changePage = function changePage(page) {\n          $scope.pager.page = page;\n          $scope.search();\n        };\n\n        $scope.prevPage = function prevPage() {\n          if ($scope.pager.page > 0) {\n            $scope.pager.page--;\n            $scope.search();\n          }\n        };\n\n        $scope.nextPage = function nextPage() {\n          if ($scope.pager.page < $scope.pager.max - 1) {\n            $scope.pager.page++;\n            $scope.search();\n          }\n        };\n\n        // Keep a watch on changes in number of hits.\n        $scope.$watch('hits', function (hits) {\n          var pages = [];\n          $scope.pager.max = 0;\n          if (hits.hits > $scope.pager.size) {\n            $scope.pager.max = Math.ceil(hits.hits / $scope.pager.size);\n            for (var i = 0; i < $scope.pager.max; i++) {\n              pages.push(i);\n            }\n          }\n          $scope.pager.pages = pages;\n        });\n      },\n      templateUrl: CONFIG.templates.pager\n    };\n  }\n]);\n","/**\n * @file\n * Dummy search provider that reads the search results from a JSON file.\n */\n\n/**\n * Search provider for JSON files.\n */\nangular.module('searchBoxApp').service('jsonProvider', ['CONFIG', '$q', '$http',\n  function (CONFIG, $q, $http) {\n    'use strict';\n\n    // Load JSON file based on configuration.\n    var data = [];\n    $http.get(CONFIG.provider.data)\n      .then(function(res){\n        data = res.data;\n      });\n\n    /**\n     * The filters available.\n     *\n     * @returns json array.\n     */\n    this.getFilters = function getFilters() {\n      return {\n        'tags': {\n          'name': 'Tags',\n          'type': 'and',\n          'items': [\n            {\n              'name': 'Angular',\n              'value': 'angular'\n            },\n            {\n              'name': 'Developer',\n              'value': 'developer'\n            },\n            {\n              'name': 'Javascript',\n              'value': 'javascript'\n            },\n            {\n              'name': 'Chrome',\n              'value': 'chrome'\n            }\n          ]\n        },\n        'levels':{\n          'name': 'Levels (or)',\n          'type': 'or',\n          'items': [\n            {\n              'name': 'First',\n              'value': 1\n            },\n            {\n              'name': 'Second',\n              'value': 2\n            },\n            {\n              'name': 'Third',\n              'value': 3\n            },\n            {\n              'name': 'Fourth',\n              'value': 4\n            }\n          ]\n        }\n      };\n    };\n\n    /**\n     * Search function to query the json data.\n     *\n     * @param query\n     *   The query parameters to search\n     *\n     * @returns {Array}\n     *   The hits found.\n     */\n    this.search = function search(query) {\n      var self = this;\n      var hits = angular.copy(data);\n\n      var deferred = $q.defer();\n\n      // Search title.\n      if (query.text !== '') {\n        hits = JSON.search(data, '//*[contains(title, \"' + query.text + '\")]');\n      }\n\n      // Search filters.\n      angular.forEach(query.filters, function (filter, name) {\n        // Get search type 'or' or 'and'.\n        var type = self.getFilters();\n        var xp = false;\n\n        angular.forEach(filter, function (enabled, value) {\n          if (enabled) {\n            if (type === 'or') {\n              // Or type search needs to build and xpath expression for all items\n              // in the filter.\n              if (xp === false) {\n                xp = '//*[' + name + '=\"' + value + '\"]';\n              }\n              else {\n                xp += '|//*[' + name + '=\"' + value + '\"]';\n              }\n            }\n            else {\n              // \"And\" type search simply limites the results.\n              hits = JSON.search(hits, '//*[' + name + '=\"' + value + '\"]');\n            }\n          }\n        });\n\n        // After all other search apply the \"or\" search expression.\n        if (type === 'or' && xp) {\n          hits = JSON.search(hits, xp);\n        }\n      });\n\n      // This may seem strange, but it's to keep up with the way search node\n      // works. So it makes sense to return and resolve the promise just after\n      // each other.\n      deferred.resolve({\n        'hits': hits.length,\n        'results': hits\n      });\n\n      return deferred.promise;\n    };\n  }\n]);\n","/**\n * @file\n * Search provider for the search node framework.\n */\n\nangular.module('searchBoxApp').service('searchNodeProvider', ['CONFIG', '$q', '$http', 'CacheFactory',\n  function (CONFIG, $q, $http, CacheFactory) {\n    'use strict';\n\n    // Configuration options.\n    var configuration = CONFIG.provider;\n\n    // Search node connection handling.\n    var socket;\n    var loadedSocketIo = false;\n    var token = null;\n\n    // Create cache object.\n    var searchCache = new CacheFactory('searchCache' + CONFIG.id, {\n      maxAge: configuration.cacheExpire * 1000,\n      deleteOnExpire: 'aggressive',\n      storageMode: 'localStorage'\n    });\n\n    // Holder for the latest search query filters.\n    var currentFilters = {\n      'taxonomy': undefined,\n      'boolean': undefined\n    };\n\n    /**\n     * Find the size of given object.\n     *\n     * @return int\n     *   The size of the object or 0 if empty.\n     */\n    function countProperties(obj) {\n      var size = 0;\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          size++;\n        }\n      }\n\n      return size;\n    }\n\n    /**\n     * Load the socket.io library provided by the search node.\n     *\n     * @return {promise}\n     *   An promise is return that will be resolved on library loaded.\n     */\n    function loadSocketIoScript() {\n      var deferred = $q.defer();\n\n      // Check if it have been loaded.\n      if (!loadedSocketIo) {\n        // Create script element.\n        var script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n\n        // Add event handlers for the library loaded.\n        if (script.readyState) {\n          // Handle Internet Explore.\n          script.onreadystatechange = function () {\n            if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n              script.onreadystatechange = null;\n              loadedSocketIo = true;\n              deferred.resolve();\n            }\n          };\n        } else {\n          // All other browsers.\n          script.onload = function () {\n            loadedSocketIo = true;\n            deferred.resolve();\n          };\n        }\n\n        // Add the script and add it to the dom to load it.\n        script.src = configuration.host + \"/socket.io/socket.io.js\";\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n      }\n      else {\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Connect to the web-socket.\n     *\n     * @param deferred\n     *   The deferred object that should be resolved on connection.\n     */\n    function getSocket(deferred) {\n      // Load the socket library.\n      loadSocketIoScript().then(function () {\n        // Get connected to the server.\n        socket = io.connect(configuration.host, {\n          'query': 'token=' + token,\n          'force new connection': true,\n          'max reconnection attempts': Infinity\n        });\n\n        // Handle error events.\n        socket.on('error', function (reason) {\n          console.error(reason, 'Search socket error.');\n          deferred.reject(reason);\n        });\n\n        socket.on('connect', function () {\n          deferred.resolve('Connected to the server.');\n        });\n\n        // Handle disconnect event (fires when disconnected or connection fails).\n        socket.on('disconnect', function (reason) {\n          // @todo: re-connection is automatically handled by socket.io library,\n          // but we might need to stop sending request until reconnection or the\n          // request will be queued and sent all at once... which could give\n          // some strange side effects in the application if not handled.\n        });\n      });\n    }\n\n    /**\n     * Create the connection to the server.\n     *\n     * @return {promise}\n     *   A promise is return that will be resolved on connection.\n     */\n    function connect() {\n      // Try to connect to the server if not already connected.\n      var deferred = $q.defer();\n\n      if (socket === undefined) {\n        if (token !== null) {\n          getSocket(deferred);\n        }\n        else {\n          $http.get(configuration.auth)\n            .success(function (data) {\n              token = data.token;\n              getSocket(deferred);\n            })\n            .error(function (data, status) {\n              console.error(data, 'Authentication (search) to search node failed (' + status + ')');\n              deferred.reject(status);\n            });\n        }\n      }\n      else {\n        deferred.resolve('Connected to the server.');\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Builds aggregation query based on filters.\n     *\n     * @param filters\n     */\n    function buildAggregationQuery(filters) {\n      // Basic aggregation query.\n      var query = {\n        \"aggs\": {}\n      };\n\n      for (var filterType in filters) {\n        switch (filterType) {\n          case 'taxonomy':\n            var taxonomyFilters = filters[filterType];\n            // Extend query with filter fields.\n            for (var i = 0; i < taxonomyFilters.length; i++) {\n              var filter = taxonomyFilters[i];\n              query.aggs[filter.field] = {\n                \"terms\": {\n                  \"field\": filter.field + '.raw',\n                  \"size\": 0\n                }\n              };\n            }\n            break;\n\n          case 'boolean':\n            var booleanFilters = filters[filterType];\n            for (var i = 0; i < booleanFilters.length; i++) {\n              var filter = booleanFilters[i];\n              query.aggs[filter.field] = {\n                \"terms\": {\n                  \"field\": filter.field,\n                  \"size\": 0\n                }\n              };\n            }\n            break;\n\n          default:\n            console.error('Aggregation filter has unknown type - ' + filterType);\n        }\n      }\n\n      return query;\n    }\n\n    /**\n     * Parse filter configuration and search aggregations.\n     *\n     * Merge result with filters configuration as not all terms may have\n     * been used in the content and then not in found in the search\n     * node.\n     *\n     * @param aggs\n     *\n     * @returns {{}}\n     */\n    function parseFilters(aggs) {\n      var results = {\n        'taxonomy': {},\n        'boolean': {}\n      };\n\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        var filterConfig = CONFIG.provider.filters;\n\n        for (var filterType in filterConfig) {\n          var filters = filterConfig[filterType];\n          for (var i = 0; i < filters.length; i++) {\n            var filter = angular.copy(filters[i]);\n\n            // Set basic filter with counts.\n            results[filterType][filter.field] = {\n              'name': filter.name,\n            };\n\n            if (countProperties(aggs) !== 0) {\n              // Run through counts and update the filters.\n              switch (filterType) {\n                case 'taxonomy':\n                  results[filterType][filter.field].items = filter.terms;\n\n                  for (var j = 0; j < aggs[filter.field].buckets.length; j++) {\n                    var bucket = aggs[filter.field].buckets[j];\n                    if (results[filterType][filter.field].items.hasOwnProperty(bucket.key)) {\n                      results[filterType][filter.field].items[bucket.key].count = Number(bucket.doc_count);\n                    }\n                    else {\n                      console.error('Filter value don\\'t match configuration: ' + filter.field + ' -> ' + bucket.key);\n                    }\n                  }\n                  break;\n\n                case 'boolean':\n                  for (var j = 0; j < aggs[filter.field].buckets.length; j++) {\n                    var bucket = aggs[filter.field].buckets[j];\n\n                    // Set default count for \"true\" to zero.\n                    results[filterType][filter.field].count = 0;\n                    if (bucket.key === 'T' && bucket.doc_count > 0) {\n                      results[filterType][filter.field].count = Number(bucket.doc_count);\n                    }\n                  }\n                  break;\n\n                default:\n                  console.error('Unknown filter type used in parseFilters: ' + filterType);\n              }\n            }\n          }\n        }\n      }\n\n      return results;\n    }\n\n    /**\n     * Build boolean filter based on configuration.\n     *\n     * @returns array\n     *   The boolean filter names indexed by field name.\n     */\n    function buildBooleanFilters() {\n      var result = {};\n\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        var filters = CONFIG.provider.filters;\n\n        // Check for boolean filters.\n        if (filters.hasOwnProperty('boolean')) {\n          for (var i = 0; i < filters.boolean.length; i++) {\n            var filter = filters.boolean[i];\n            result[filter.field] = {\n              'name': filter.name,\n            };\n          }\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Get the list of available filters not parsed with search results.\n     *\n     * @return object\n     *  The filters from the configuration.\n     */\n    this.getRawFilters = function getRawFilters() {\n      var result = {};\n\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        var filters = CONFIG.provider.filters;\n\n        // Check for taxonomy filters.\n        if (filters.hasOwnProperty('taxonomy')) {\n          result.taxonomy = {};\n          for (var i = 0; i < filters.taxonomy.length; i++) {\n            var filter = filters.taxonomy[i];\n            // Set basic filter with counts.\n            result.taxonomy[filter.field] = {\n              'name': filter.name,\n              'items': filter.terms\n            };\n          }\n        }\n\n        // Check for boolean filters.\n        result.boolean = buildBooleanFilters();\n      }\n\n      return result;\n    };\n\n    /**\n     * Get the list of available filters.\n     *\n     * @PLAN:\n     *   Check if latest search returned aggregations, if not use the\n     *   configuration to search the get all available aggregations.\n     *\n     *   Merge it with configuration to ensure that all possible filters are\n     *   displayed with count.\n     */\n    this.getFilters = function getFilters() {\n      var deferred = $q.defer();\n\n      // Get filters from configuration.\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        // If no search has been executed yet, load the default filters across\n        // all indexed data.\n        if (currentFilters.taxonomy === undefined) {\n          // Check if filters are cached.\n          var cachedFilters = searchCache.get('filters');\n\n          if (cachedFilters !== undefined) {\n            // Store current filters.\n            currentFilters = cachedFilters;\n\n            // Return the result.\n            deferred.resolve(angular.copy(currentFilters));\n          }\n          else {\n            // Get the query.\n            var query = buildAggregationQuery(CONFIG.provider.filters);\n\n            /**\n             * @TODO: Added forced fields and other search options.\n             */\n\n            // Send the request to search node.\n            connect().then(function () {\n              socket.emit('count', query);\n              socket.once('counts', function (counts) {\n                currentFilters = parseFilters(counts);\n                //currentFilters.boolean = buildBooleanFilters();\n\n                // Store initial filters in cache.\n                searchCache.put('filters', currentFilters);\n\n                // Return the result.\n                deferred.resolve(currentFilters);\n              });\n\n              // Catch search errors.\n              socket.once('searchError', function (error) {\n                console.error('Search error', error.message);\n                deferred.reject(error.message);\n              });\n            });\n          }\n        }\n        else {\n          // Return the result.\n          deferred.resolve(angular.copy(currentFilters));\n        }\n      }\n      else {\n        deferred.resolve({});\n      }\n\n      return deferred.promise;\n    };\n\n    /**\n     * Execute search query.\n     *\n     * @param searchQuery\n     * @returns {*}\n     */\n    this.search = function search(searchQuery) {\n      var deferred = $q.defer();\n\n      // Build default \"match all\" search query.\n      var query = {\n        \"index\": configuration.index,\n        \"query\": {\n          \"filtered\": {\n            \"query\": {\n              \"match_all\": {}\n            }\n          }\n        }\n      };\n\n      // Text given build field search query.\n      // The analyser ensures that we match the who text string sent not part\n      // of.\n      if (searchQuery.text !== undefined && searchQuery.text !== '') {\n        var fields = configuration.fields;\n        // Check if boost exist for the fields.\n        if (configuration.hasOwnProperty('boost') && countProperties(configuration.boost)) {\n          // Add boost to fields.\n          for (var i in fields) {\n            if (configuration.boost.hasOwnProperty(fields[i])) {\n              fields[i] = fields[i] + '^' + configuration.boost[fields[i]];\n            }\n          }\n        }\n\n        query.query.filtered.query = {\n          \"multi_match\": {\n            \"query\": searchQuery.text,\n            \"fields\": fields,\n            \"analyzer\": 'string_search'\n          }\n        };\n      }\n\n      // Add sort fields.\n      if (searchQuery.hasOwnProperty('sort') && countProperties(searchQuery.sort) > 0) {\n        query.sort = {};\n        for (var field in searchQuery.sort) {\n          query.sort[field] = {\n            \"order\": searchQuery.sort[field]\n          };\n        }\n      }\n\n      // Add filter.\n      if (searchQuery.hasOwnProperty('filters')) {\n        var filters = angular.copy(searchQuery.filters);\n\n        // Build query filter.\n        var queryFilter = {\n          \"bool\": {\n            \"must\": []\n          }\n        };\n\n        // Loop over taxonomy filters.\n        if (filters.hasOwnProperty('taxonomy')) {\n          for (var field in filters.taxonomy) {\n            var filter = filters.taxonomy[field];\n            /**\n             * @TODO: Needs to get information from configuration about execution\n             *        type?\n             */\n            var terms = {\n              \"execution\": \"and\"\n            };\n\n            terms[field + '.raw'] = [];\n            for (var term in filter) {\n              // Check the the term is \"true\", hence is selected.\n              if (filter[term]) {\n                terms[field + '.raw'].push(term);\n              }\n            }\n\n            if (terms[field + '.raw'].length) {\n              queryFilter.bool.must.push({ \"terms\": terms });\n            }\n          }\n        }\n\n        // Loop over boolean filters.\n        if (filters.hasOwnProperty('boolean')) {\n          for (var field in filters.boolean) {\n            if (filters.boolean[field]) {\n              var term = {};\n              term[field] = filters.boolean[field];\n              queryFilter.bool.must.push({ \"term\": term });\n            }\n          }\n        }\n\n        // Add the query filter if filled out.\n        if (queryFilter.bool.must.length) {\n          query.query.filtered.filter = queryFilter;\n        }\n      }\n\n      // Add pager to the query.\n      if (searchQuery.hasOwnProperty('pager')) {\n        query.size = searchQuery.pager.size;\n        query.from = searchQuery.pager.page * searchQuery.pager.size;\n      }\n\n      // Check if aggregations/filters counts should be used.\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        // Get the query.\n        var aggs = buildAggregationQuery(CONFIG.provider.filters);\n        angular.extend(query, aggs);\n      }\n\n      // Add range/interval search to the query.\n      if (searchQuery.hasOwnProperty('intervals')) {\n        // Check if any filters have been defined.\n        if (!query.query.filtered.hasOwnProperty('filter')) {\n          query.query.filtered.filter = {\n            \"bool\": {\n              \"must\": []\n            }\n          };\n        }\n\n        // Loop over the intervals and build range terms.\n        for (var field in searchQuery.intervals) {\n          var interval = {\n            \"range\": {}\n          };\n          interval.range[field] = {\n            \"gte\": searchQuery.intervals[field].from,\n            \"lte\": searchQuery.intervals[field].to\n          };\n          query.query.filtered.filter.bool.must.push(interval);\n        }\n      }\n\n      // Add date interval search.\n      if (searchQuery.hasOwnProperty('dates')) {\n        // Check if any filters have been defined.\n        if (!query.query.filtered.hasOwnProperty('filter')) {\n          query.query.filtered.filter = {\n            \"bool\": {\n              \"should\": [ ]\n            }\n          };\n        }\n        else {\n          query.query.filtered.filter.bool.should = [];\n        }\n\n        // Loop over the intervals and build range terms.\n        for (var field in searchQuery.dates) {\n          var config = configuration.dates[field];\n          var template = {\n            \"bool\": {\n              \"must\": [\n                {\n                  \"range\": {}\n                },\n                {\n                  \"range\": {}\n                }\n              ]\n            }\n          };\n\n          // Overlap start of the interval.\n          template.bool.must[0].range[config.from] = {\n            \"lte\": searchQuery.dates[field].from\n          };\n          template.bool.must[1].range[config.to] = {\n            \"gt\": searchQuery.dates[field].from\n          };\n          query.query.filtered.filter.bool.should.push(angular.copy(template));\n\n          // Overlap end of the interval.\n          template.bool.must[0].range[config.from] = {\n            \"lt\": searchQuery.dates[field].to\n          };\n          template.bool.must[1].range[config.to] = {\n            \"gte\": searchQuery.dates[field].to\n          };\n          query.query.filtered.filter.bool.should.push(angular.copy(template));\n\n          // Overlap both endes of the interval.\n          template.bool.must[0].range[config.from] = {\n            \"gte\": searchQuery.dates[field].from\n          };\n          template.bool.must[1].range[config.to] = {\n            \"lte\": searchQuery.dates[field].to\n          };\n          query.query.filtered.filter.bool.should.push(angular.copy(template));\n        }\n      }\n\n      // Create cache key based on the finale search query.\n      var cid = CryptoJS.MD5(JSON.stringify(query)).toString();\n\n      // Check cache for hits.\n      var hits = searchCache.get(cid);\n      if (hits !== undefined) {\n        // Update filters cache.\n        if (hits.hasOwnProperty('aggs')) {\n          currentFilters = parseFilters(angular.copy(hits.aggs));\n          //currentFilters.boolean = buildBooleanFilters();\n        }\n\n        deferred.resolve(hits);\n      }\n      else {\n        connect().then(function () {\n          socket.emit('search', query);\n          socket.once('result', function (hits) {\n            // Update cache filters cache, based on the current search result.\n            if (hits.hasOwnProperty('aggs')) {\n              // Store current filters.\n              currentFilters = parseFilters(angular.copy(hits.aggs));\n              //currentFilters.boolean = buildBooleanFilters();\n            }\n\n            // Save hits in cache.\n            searchCache.put(cid, hits);\n\n            deferred.resolve(hits);\n          });\n\n          // Catch search errors.\n          socket.once('searchError', function (error) {\n            console.error('Search error', error.message);\n            deferred.reject(error.message);\n          });\n        });\n      }\n\n      return deferred.promise;\n    };\n  }\n]);\n","/**\n * @file\n * Service to communication between search box and search result applications.\n */\n\nangular.module('communicationService', [])\n  .service('communicatorService', function($rootScope, $window){\n    'use strict';\n\n    // Store rootScopes for each service user.\n    $window.rootScopes = $window.rootScopes || [];\n    $window.rootScopes.push($rootScope);\n\n    /**\n     * Wrapper for emitting events to all root scopes.\n     *\n     * @param name\n     *   Event name\n     * @param args\n     *   Event arguments.\n     */\n    this.$emit = function emit(name, args) {\n      angular.forEach($window.rootScopes, function(scope) {\n        scope.$emit(name, args);\n      });\n    };\n\n    /**\n     * Wrapper to attach event listeners to the current root scope.\n     *\n     * @param name\n     *   Event name.\n     * @param listener\n     *   The listener to call on event.\n     */\n    this.$on = function on(name, listener) {\n      $rootScope.$on(name, function (event, message) {\n        listener.apply($rootScope, [event, message]);\n      });\n    };\n  });","/**\n * @file\n * Search proxy.\n *\n * Allows the framework to use different search back-ends based on\n * configuration settings.\n */\n\n/**\n * Search proxy is used to send search requests to the configured provider.\n */\nangular.module('searchBoxApp').service('searchProxyService', ['CONFIG', 'communicatorService', '$injector',\n  function (CONFIG, communicatorService, $injector) {\n    'use strict';\n\n    // Load provider based on configuration.\n    var provider = $injector.get(CONFIG.provider.service);\n\n    /**\n     * Find the size of given object.\n     *\n     * @return int\n     *   The size of the object or 0 if empty.\n     */\n    function countProperties(obj) {\n      var size = 0;\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          size++;\n        }\n      }\n\n      return size;\n    }\n\n    /**\n     * Encode the query object into a string.\n     *\n     * @param query\n     *   The query object.\n     *\n     * @return string\n     *   The encoded string that can been used as hash tag in url.\n     */\n    function encodeSearchQuery(query) {\n      var parts = [];\n\n      // Search text.\n      if (query.hasOwnProperty('text') && query.text.length !== 0) {\n        parts.push('text=' + encodeURIComponent(query.text));\n      }\n\n      // Filters.\n      if (query.hasOwnProperty('filters')) {\n        for (var type in query.filters) {\n          if (countProperties(query.filters[type]) !== 0) {\n            var filter = query.filters[type];\n            var filterParts = [];\n            for (var field in filter) {\n              var selected = [];\n\n              // Check if it's a simple boolean filter.\n              if (typeof filter[field] === \"boolean\" && filter[field] === true) {\n                filterParts.push(field);\n              }\n              else {\n                // Multi level filters (taxonomy).\n                for (var i in filter[field]) {\n                  if (filter[field][i] === true) {\n                    selected.push(i);\n                  }\n                }\n\n                // Only add the filter if filter have selections.\n                if (selected.length) {\n                  filterParts.push(field + ':' + selected.join(';'));\n                }\n              }\n            }\n\n            // Only encode filters if any have be selected.\n            if (filterParts.length) {\n              parts.push('filters[' + type + ']=' + encodeURIComponent(filterParts.join('?')));\n            }\n          }\n        }\n      }\n\n      // Interval search.\n      if (query.hasOwnProperty('intervals') && countProperties(query.intervals) !== 0) {\n        var intervalParts = [];\n        for (var field in query.intervals) {\n          var interval = query.intervals[field];\n          intervalParts.push(field + ';' + interval.from + ';' + interval.to);\n        }\n        parts.push('intervals=' + encodeURIComponent(intervalParts.join('?')));\n      }\n\n      // Date search.\n      if (query.hasOwnProperty('dates') && countProperties(query.dates) !== 0) {\n        // @TODO: This is the same as for intervals. Refactor into function or\n        // loop over type.\n        var dateParts = [];\n        for (var field in query.dates) {\n            var date = query.dates[field];\n          dateParts.push(field + ';' + date.from + ';' + date.to);\n        }\n        parts.push('dates=' + encodeURIComponent(dateParts.join('?')));\n      }\n\n      // Pager page.\n      if (query.hasOwnProperty('pager')) {\n        parts.push('pager=' + query.pager.page + ':' + query.pager.size);\n      }\n\n      return parts.join('&');\n    }\n\n    /**\n     * Decode the hash tag string into search query object.\n     *\n     * @param string\n     *   The encode string that can be used as hash tag in url.\n     *\n     * @return object\n     *   Search query object.\n     */\n    function decodeSearchQuery(string) {\n      var query = {};\n\n      // Get parts.\n      var parts = string.substr(2).split('&');\n      for (var part in parts) {\n        // Decode the type identifier.\n        var subParts = parts[part].split('=');\n        var type = decodeURIComponent(subParts[0]);\n        if (type.indexOf('[') !== -1) {\n          type = type.substr(0, type.indexOf('['));\n        }\n\n        switch (type) {\n          case 'text':\n            query.text = decodeURIComponent(subParts[1]);\n            break;\n\n          case 'filters':\n            var str = decodeURIComponent(subParts[0]);\n            var filterType = str.substr(str.indexOf('[') + 1).slice(0, -1);\n            var filters = decodeURIComponent(subParts[1]).split('?');\n\n            if (filters.length) {\n              // Initialize the filters on the query object.\n              if (!query.hasOwnProperty('filters')) {\n                query.filters = {\n                  'taxonomy': {},\n                  'boolean': {}\n                };\n              }\n\n              for (var i in filters) {\n                switch (filterType) {\n                  case 'taxonomy':\n                    var filter = filters[i].split(':');\n                    // Reduce the array values into an object.\n                    query.filters[filterType][filter[0]] = filter[1].split(';').reduce(function (obj, val, index) {\n                      obj[val] = true;\n                      return obj;\n                    }, {});\n                    break;\n\n                  case 'boolean':\n                    query.filters[filterType][filters[i]] = true;\n                    break;\n\n                  default:\n                    console.error('Decoding of search hash has unknown filter type - ' + filterType);\n                }\n\n              }\n            }\n            break;\n\n          case 'intervals':\n            var intervals = decodeURIComponent(subParts[1]).split('?');\n            if (intervals.length) {\n              query.intervals = {};\n              for (var i in intervals) {\n                var interval = intervals[i].split(';');\n                query.intervals[interval[0]] = {\n                  'from': interval[1],\n                  'to': interval[2]\n                };\n              }\n            }\n            break;\n\n          // @TODO: This is the same as for intervals. Refactor into function.\n          case 'dates':\n            var dates = decodeURIComponent(subParts[1]).split('?');\n            if (dates.length) {\n              query.dates = {};\n              for (var i in dates) {\n                var date = dates[i].split(';');\n                query.dates[date[0]] = {\n                  'from': date[1],\n                  'to': date[2]\n                };\n              }\n            }\n            break;\n\n          case 'pager':\n            var pager = subParts[1].split(':');\n            query.pager = {\n              'page': Number(pager[0]),\n              'size': Number(pager[1])\n            };\n            break;\n\n          default:\n            console.error('Decoding of search hash has unknown parts - ' + subParts[0]);\n        }\n      }\n\n      return query;\n    }\n\n    /**\n     * Get basic information about the search state.\n     *\n     * @return object\n     *  The last query form hash tag and default filters.\n     */\n    this.getState = function getState() {\n      var state = {\n        'filters': this.getRawFilters()\n      };\n\n      var hash = window.location.hash;\n      if (hash.length > 2) {\n         state.query = decodeSearchQuery(hash);\n      }\n\n      return state;\n    };\n\n    /**\n     * Search the provider loaded.\n     *\n     * This simply forwards the search request to the provider loaded.\n     *\n     * @param searchQuery\n     *   The search query.\n     *\n     * @returns {Number|*|Object}\n     *   The search result.\n     */\n    this.search = function search(searchQuery) {\n      // Ensure that forced fields and other changes are not reflected in the\n      // UI.\n      var query = angular.copy(searchQuery);\n\n      // Ensure that intervals are set in the configuration and have both from\n      // and to values.\n      if (CONFIG.provider.hasOwnProperty('intervals') && CONFIG.provider.intervals.length) {\n        if (query.hasOwnProperty('intervals')) {\n          for (var field in query.intervals) {\n            // Check if both from and to exists.\n            // @TODO: Review - This can be flipped to avoid the \"empty\" if - continue does nothing :)\n            if (!(query.intervals[field].hasOwnProperty('from') && query.intervals[field].from !== '') &&\n                !(query.intervals[field].hasOwnProperty('to') && query.intervals[field].to !== '')) {\n              // Remove invalidated interval.\n              delete query.intervals[field];\n            }\n          }\n        }\n      }\n      else {\n        // Configuration does not have intervals.\n        if (query.hasOwnProperty('intervals')) {\n          delete query.intervals;\n        }\n      }\n\n      // Keep track of the current URL.\n      window.location.hash = encodeSearchQuery(query);\n\n      // Force search filters form configuration (predefined filters).\n      if (CONFIG.provider.hasOwnProperty('force') && CONFIG.provider.force.length) {\n        // If the query has been loaded form the URL, it may not have any\n        // selected filters, hence no filters on the query object.\n        if (!query.hasOwnProperty('filters')) {\n          query.filters = {};\n        }\n\n        var forces = CONFIG.provider.force;\n        for (var i in forces) {\n          var force = forces[i];\n\n          // Check filter type.\n          if (!query.filters.hasOwnProperty(force.type)) {\n            query.filters[force.type] = {};\n          }\n\n          // Check if user have selected filter, if not init it.\n          if (!query.filters.hasOwnProperty(force.field)) {\n            query.filters[force.type][force.field] = {};\n          }\n\n          // Insert the forced field values.\n          for (var j in force.values) {\n            query.filters[force.type][force.field][force.values[j]] = true;\n          }\n        }\n      }\n\n      return provider.search(query);\n    };\n\n    /**\n     * Get filters provided by configuration.\n     *\n     * @returns json\n     */\n    this.getRawFilters = function getRawFilters() {\n      return provider.getRawFilters();\n    };\n\n    /**\n     * Get filters provided by search engine used.\n     *\n     * @returns json\n     */\n    this.getFilters = function getFilters() {\n      return provider.getFilters();\n    };\n  }\n]);\n"],"sourceRoot":"/source/"}