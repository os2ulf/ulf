/**
 * @name Search node Angular library
 * @version v1.2.4
 * @link https://github.com/search-node/searchpt
 */
{"version":3,"sources":["search.js","controllers/boxController.js","controllers/resultController.js","directive/keyCodeDirective.js","directive/pagerDirective.js","providers/jsonProvider.js","providers/searchNodeProvider.js","services/communicationService.js","services/searchProxyService.js"],"names":["angular","module","element","document","ready","result","getElementById","bootstrap","console","error","box","controller","CONFIG","communicatorService","searchProxyService","$scope","search","$emit","provider","hasOwnProperty","query","sort","sorting","field","order","then","data","getFilters","filters","reason","hits","init","state","getState","template","templates","text","intervals","dates","pager","copy","initialQueryText","pagerUpdated","size","page","$on","event","phase","this","$root","$$phase","$apply","searchClicked","searching","directive","restrict","link","$element","$attrs","bind","keyCode","which","Number","code","$eval","$event","replace","scope","changePage","prevPage","nextPage","max","$watch","pages","Math","ceil","i","push","templateUrl","service","$q","$http","get","res","tags","name","type","items","value","levels","self","deferred","defer","JSON","forEach","filter","xp","enabled","resolve","length","results","promise","CacheFactory","countProperties","obj","key","loadSocketIoScript","loadedSocketIo","script","createElement","readyState","onreadystatechange","onload","src","configuration","host","getElementsByTagName","appendChild","getSocket","socket","io","connect","token","force new connection","max reconnection attempts","Infinity","on","reject","undefined","auth","success","status","buildAggregationQuery","aggs","filterType","taxonomyFilters","terms","booleanFilters","parseFilters","taxonomy","boolean","filterConfig","j","buckets","bucket","count","doc_count","buildBooleanFilters","searchCache","id","maxAge","cacheExpire","deleteOnExpire","storageMode","currentFilters","getRawFilters","cachedFilters","emit","once","counts","put","message","searchQuery","index","filtered","match_all","fields","boost","multi_match","analyzer","queryFilter","bool","must","execution","term","from","extend","interval","range","gte","lte","to","should","config","gt","lt","cid","CryptoJS","MD5","stringify","toString","uuid","searchError","removeListener","$rootScope","$window","rootScopes","args","listener","apply","$injector","encodeSearchQuery","parts","encodeURIComponent","filterParts","selected","join","intervalParts","dateParts","date","decodeSearchQuery","string","substr","split","part","subParts","decodeURIComponent","indexOf","str","slice","reduce","val","hash","window","location","byPassUrlEncode","force","forces","values"],"mappings":"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","file":"search.js","sourcesContent":["\n/**\n * @file\n * Defines the Angular JS application.\n */\n\n// Define the angular applications.\nangular.module('searchBoxApp', ['communicationService', 'searchAppConfig', 'angular-cache']);\nangular.module('searchResultApp', ['communicationService', 'searchAppConfig', 'ngSanitize']);\n\n/**\n * When the document is ready bootstrap the two applications.\n */\nangular.element(document).ready(function ready() {\n  \"use strict\";\n\n  // Bootstrap the search result area. This has to be booted first to ensure\n  // that it's ready for events from the search box bootstrap process.\n  var result = document.getElementById(\"searchResultApp\");\n  if (result) {\n    angular.bootstrap(result, ['searchResultApp']);\n  }\n  else {\n    console.error('Unable to bootstrap searchResultApp. Missing HTML tag with id \"searchResultApp\"');\n  }\n\n  // Bootstrap search box.\n  var box = document.getElementById(\"searchBoxApp\");\n  if (box) {\n    angular.bootstrap(box, ['searchBoxApp']);\n  }\n  else {\n    console.error('Unable to bootstrap searchBoxApp. Missing HTML tag with id \"searchBoxApp\"');\n  }\n});\n","/**\n * @file\n * This is the main controller for the application.\n *\n * It controls the search box and filters.\n */\n\nangular.module('searchBoxApp').controller('boxController', ['CONFIG', 'communicatorService', 'searchProxyService', '$scope',\n  function (CONFIG, communicatorService, searchProxyService, $scope) {\n    'use strict';\n\n    /**\n     * Execute the search and emit the results.\n     */\n    function search() {\n      // Send info to results that a new search have started.\n      communicatorService.$emit('searching', {});\n\n      // Add sorting to the search query. It's added here to make it possible to\n      // override or add sorting in search queries from the UI. If it was added\n      // in the provider it would limit further sorting from the UI.\n      if (CONFIG.provider.hasOwnProperty('sorting')) {\n        $scope.query.sort = {};\n        $scope.query.sort[CONFIG.provider.sorting.field] = CONFIG.provider.sorting.order;\n      }\n\n      // Start the search request.\n      searchProxyService.search($scope.query).then(\n        function (data) {\n          // Updated filters.\n          searchProxyService.getFilters().then(\n            function (filters) {\n              $scope.filters = filters;\n            },\n            function (reason) {\n              console.error(reason);\n            }\n          );\n\n          // Send results.\n          communicatorService.$emit('hits', {\"hits\": data});\n        },\n        function (reason) {\n          console.error(reason);\n        }\n      );\n    }\n\n    /**\n     * Initialize the controller and configure the basic scope.\n     */\n    function init() {\n      // Get state from previous search.\n      var state = searchProxyService.getState();\n\n      // Get filters.\n      $scope.filters = state.filters;\n\n      // Set template to use.\n      $scope.template = CONFIG.templates.box;\n\n      // Init the query object.\n      $scope.query = {\n        'text': '',\n        'filters': {}\n      };\n\n      // Check if any intervals have been configured.\n      if (CONFIG.provider.hasOwnProperty('intervals')) {\n        $scope.intervals = CONFIG.provider.intervals;\n        $scope.query.intervals = {};\n      }\n\n      // Check if any dates have been configured.\n      if (CONFIG.provider.hasOwnProperty('dates')) {\n        $scope.dates = CONFIG.provider.dates;\n        $scope.query.dates = {};\n      }\n\n      // Check if any search query have been located from the hash tag.\n      if (state.hasOwnProperty('query')) {\n        // Query found in state, so execute that search.\n        $scope.query = state.query;\n        search();\n      }\n      else {\n        // Check if the provider supports an pager.\n        if (CONFIG.provider.hasOwnProperty('pager')) {\n          // Add pager information to the search query.\n          $scope.query.pager = angular.copy(CONFIG.provider.pager);\n        }\n\n        // Check if an initial search should be executed.\n        if (CONFIG.hasOwnProperty('initialQueryText')) {\n          $scope.query.text = angular.copy(CONFIG.initialQueryText);\n\n          // Execute the search.\n          search();\n        }\n        else {\n          // Get filters based on search content (maybe slow).\n          searchProxyService.getFilters().then(\n            function (filters) {\n              $scope.filters = filters;\n            },\n            function (reason) {\n              console.error(reason);\n            }\n          );\n        }\n      }\n    }\n\n    /**\n     * Updated search based on pager.\n     */\n    function pagerUpdated(data) {\n      $scope.query.pager = {\n        'size': data.size,\n        'page': data.page\n      };\n      search();\n    }\n\n    /**\n     * Communication listener for pager changes from the search results\n     * application.\n     */\n    communicatorService.$on('pager', function (event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        pagerUpdated(data);\n      }\n      else {\n        $scope.$apply(function () {\n          pagerUpdated(data);\n        });\n      }\n    });\n\n    /**\n     * Search click handler.\n     *\n     * Simple wrapper for search that resets the pager before executing the\n     * search.\n     */\n    $scope.searchClicked = function searchClicked() {\n      // Reset pager.\n      if ($scope.query.hasOwnProperty('pager')) {\n        $scope.query.pager = angular.copy(CONFIG.provider.pager);\n      }\n\n      search();\n    };\n\n    // Get the show on the road.\n    init();\n  }\n]);\n","/**\n * @file\n * This is the controller for the search result application.\n *\n * It simply updates the view when hits have been received.\n */\n\nangular.module('searchResultApp').controller('resultController', ['CONFIG', 'communicatorService', '$scope',\n  function (CONFIG, communicatorService, $scope) {\n    'use strict';\n\n    // Set template to use.\n    $scope.template = CONFIG.templates.result;\n\n    // Scope variable that can be used to make indications on the current\n    // process. E.g display spinner.\n    $scope.searching = false;\n\n    // Check if the provider supports an pager.\n    if (CONFIG.provider.hasOwnProperty('pager')) {\n      // Add pager information to the scope.\n      $scope.pager = angular.copy(CONFIG.provider.pager);\n    }\n\n    /**\n     * Update pager information.\n     */\n    $scope.search = function search() {\n      communicatorService.$emit('pager', $scope.pager);\n    };\n\n    /**\n     * Hanled search results hits from the search box application.\n     */\n    $scope.hits = [];\n    communicatorService.$on('hits', function onHits(event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        $scope.hits = data.hits;\n        $scope.searching = false;\n      }\n      else {\n        $scope.$apply(function () {\n          $scope.hits = data.hits;\n          $scope.searching = false;\n        });\n      }\n    });\n\n    /**\n     * Hanled searching message, send when search is called.\n     */\n    communicatorService.$on('searching', function onSearching(event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        $scope.searching = true;\n      }\n      else {\n        $scope.$apply(function () {\n          $scope.searching = true;\n        });\n      }\n    });\n\n    /**\n     * Handled pager updates.\n     */\n    communicatorService.$on('pager', function onPager(event, data) {\n      var phase = this.$root.$$phase;\n      if (phase === '$apply' || phase === '$digest') {\n        $scope.pager = data;\n      }\n      else {\n        $scope.$apply(function () {\n          $scope.pager = data;\n        });\n      }\n    });\n  }\n]);\n","/**\n * @file\n * Directive to capture key codes.\n *\n * @see http://codepen.io/TheLarkInn/blog/angularjs-directive-labs-ngenterkey.\n *\n * Use by adding html attributes:\n *   data-code=\"key_code_to_capture\"\n *   data-key-code=\"function_to_call()\"\n */\nangular.module('searchBoxApp').directive('keyCode', function keyCode() {\n  'use strict';\n\n  return {\n    restrict: 'A',\n    link: function($scope, $element, $attrs) {\n      $element.bind(\"keypress\", function(event) {\n        var keyCode = event.which || event.keyCode;\n        if (keyCode === Number($attrs.code)) {\n          $scope.$apply(function() {\n            $scope.$eval($attrs.keyCode, { $event: event });\n          });\n        }\n      });\n    }\n  };\n});\n","/**\n * @file\n * Paging directive.\n */\n\n/**\n * Paging directive.\n *\n * @TODO: Review - maybe use the newer version from https://github.com/aroskanalen/admin/tree/development/web/app/shared/elements/pager\n */\nangular.module('searchResultApp').directive('searchPager', ['CONFIG',\n  function (CONFIG) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: true,\n      controller: function ($scope) {\n\n        /**\n         * Click handler to change page.\n         *\n         * @param page\n         */\n        $scope.changePage = function changePage(page) {\n          $scope.pager.page = page;\n          $scope.search();\n        };\n\n        $scope.prevPage = function prevPage() {\n          if ($scope.pager.page > 0) {\n            $scope.pager.page--;\n            $scope.search();\n          }\n        };\n\n        $scope.nextPage = function nextPage() {\n          if ($scope.pager.page < $scope.pager.max - 1) {\n            $scope.pager.page++;\n            $scope.search();\n          }\n        };\n\n        // Keep a watch on changes in number of hits.\n        $scope.$watch('hits', function (hits) {\n          var pages = [];\n          $scope.pager.max = 0;\n          if (hits.hits > $scope.pager.size) {\n            $scope.pager.max = Math.ceil(hits.hits / $scope.pager.size);\n            for (var i = 0; i < $scope.pager.max; i++) {\n              pages.push(i);\n            }\n          }\n          $scope.pager.pages = pages;\n        });\n      },\n      templateUrl: CONFIG.templates.pager\n    };\n  }\n]);\n","/**\n * @file\n * Dummy search provider that reads the search results from a JSON file.\n */\n\n/**\n * Search provider for JSON files.\n */\nangular.module('searchBoxApp').service('jsonProvider', ['CONFIG', '$q', '$http',\n  function (CONFIG, $q, $http) {\n    'use strict';\n\n    // Load JSON file based on configuration.\n    var data = [];\n    $http.get(CONFIG.provider.data)\n      .then(function(res){\n        data = res.data;\n      });\n\n    /**\n     * The filters available.\n     *\n     * @returns json array.\n     */\n    this.getFilters = function getFilters() {\n      return {\n        'tags': {\n          'name': 'Tags',\n          'type': 'and',\n          'items': [\n            {\n              'name': 'Angular',\n              'value': 'angular'\n            },\n            {\n              'name': 'Developer',\n              'value': 'developer'\n            },\n            {\n              'name': 'Javascript',\n              'value': 'javascript'\n            },\n            {\n              'name': 'Chrome',\n              'value': 'chrome'\n            }\n          ]\n        },\n        'levels':{\n          'name': 'Levels (or)',\n          'type': 'or',\n          'items': [\n            {\n              'name': 'First',\n              'value': 1\n            },\n            {\n              'name': 'Second',\n              'value': 2\n            },\n            {\n              'name': 'Third',\n              'value': 3\n            },\n            {\n              'name': 'Fourth',\n              'value': 4\n            }\n          ]\n        }\n      };\n    };\n\n    /**\n     * Search function to query the json data.\n     *\n     * @param query\n     *   The query parameters to search\n     *\n     * @returns {Array}\n     *   The hits found.\n     */\n    this.search = function search(query) {\n      var self = this;\n      var hits = angular.copy(data);\n\n      var deferred = $q.defer();\n\n      // Search title.\n      if (query.text !== '') {\n        hits = JSON.search(data, '//*[contains(title, \"' + query.text + '\")]');\n      }\n\n      // Search filters.\n      angular.forEach(query.filters, function (filter, name) {\n        // Get search type 'or' or 'and'.\n        var type = self.getFilters();\n        var xp = false;\n\n        angular.forEach(filter, function (enabled, value) {\n          if (enabled) {\n            if (type === 'or') {\n              // Or type search needs to build and xpath expression for all items\n              // in the filter.\n              if (xp === false) {\n                xp = '//*[' + name + '=\"' + value + '\"]';\n              }\n              else {\n                xp += '|//*[' + name + '=\"' + value + '\"]';\n              }\n            }\n            else {\n              // \"And\" type search simply limites the results.\n              hits = JSON.search(hits, '//*[' + name + '=\"' + value + '\"]');\n            }\n          }\n        });\n\n        // After all other search apply the \"or\" search expression.\n        if (type === 'or' && xp) {\n          hits = JSON.search(hits, xp);\n        }\n      });\n\n      // This may seem strange, but it's to keep up with the way search node\n      // works. So it makes sense to return and resolve the promise just after\n      // each other.\n      deferred.resolve({\n        'hits': hits.length,\n        'results': hits\n      });\n\n      return deferred.promise;\n    };\n  }\n]);\n","/**\n * @file\n * Search provider for the search node framework.\n */\n\nangular.module('searchBoxApp').service('searchNodeProvider', ['CONFIG', '$q', '$http', 'CacheFactory',\n  function (CONFIG, $q, $http, CacheFactory) {\n    'use strict';\n\n    // Configuration options.\n    var configuration = CONFIG.provider;\n\n    // Search node connection handling.\n    var socket;\n    var loadedSocketIo = false;\n    var token = null;\n\n    // Create cache object.\n    var searchCache = new CacheFactory('searchCache' + CONFIG.id, {\n      maxAge: configuration.cacheExpire * 1000,\n      deleteOnExpire: 'aggressive',\n      storageMode: 'localStorage'\n    });\n\n    // Holder for the latest search query filters.\n    var currentFilters = {\n      'taxonomy': undefined,\n      'boolean': undefined\n    };\n\n    /**\n     * Find the size of given object.\n     *\n     * @return int\n     *   The size of the object or 0 if empty.\n     */\n    function countProperties(obj) {\n      var size = 0;\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          size++;\n        }\n      }\n\n      return size;\n    }\n\n    /**\n     * Load the socket.io library provided by the search node.\n     *\n     * @return {promise}\n     *   An promise is return that will be resolved on library loaded.\n     */\n    function loadSocketIoScript() {\n      var deferred = $q.defer();\n\n      // Check if it have been loaded.\n      if (!loadedSocketIo) {\n        // Create script element.\n        var script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n\n        // Add event handlers for the library loaded.\n        if (script.readyState) {\n          // Handle Internet Explore.\n          script.onreadystatechange = function () {\n            if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n              script.onreadystatechange = null;\n              loadedSocketIo = true;\n              deferred.resolve();\n            }\n          };\n        } else {\n          // All other browsers.\n          script.onload = function () {\n            loadedSocketIo = true;\n            deferred.resolve();\n          };\n        }\n\n        // Add the script and add it to the dom to load it.\n        script.src = configuration.host + \"/socket.io/socket.io.js\";\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n      }\n      else {\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Connect to the web-socket.\n     *\n     * @param deferred\n     *   The deferred object that should be resolved on connection.\n     */\n    function getSocket(deferred) {\n      // Load the socket library.\n      loadSocketIoScript().then(function () {\n        // Get connected to the server.\n        socket = io.connect(configuration.host, {\n          'query': 'token=' + token,\n          'force new connection': true,\n          'max reconnection attempts': Infinity\n        });\n\n        // Handle error events.\n        socket.on('error', function (reason) {\n          console.error(reason, 'Search socket error.');\n          deferred.reject(reason);\n        });\n\n        socket.on('connect', function () {\n          deferred.resolve('Connected to the server.');\n        });\n\n        // Handle disconnect event (fires when disconnected or connection fails).\n        socket.on('disconnect', function (reason) {\n          // @todo: re-connection is automatically handled by socket.io library,\n          // but we might need to stop sending request until reconnection or the\n          // request will be queued and sent all at once... which could give\n          // some strange side effects in the application if not handled.\n        });\n      });\n    }\n\n    /**\n     * Create the connection to the server.\n     *\n     * @return {promise}\n     *   A promise is return that will be resolved on connection.\n     */\n    function connect() {\n      // Try to connect to the server if not already connected.\n      var deferred = $q.defer();\n\n      if (socket === undefined) {\n        if (token !== null) {\n          getSocket(deferred);\n        }\n        else {\n          $http.get(configuration.auth)\n            .success(function (data) {\n              token = data.token;\n              getSocket(deferred);\n            })\n            .error(function (data, status) {\n              console.error(data, 'Authentication (search) to search node failed (' + status + ')');\n              deferred.reject(status);\n            });\n        }\n      }\n      else {\n        deferred.resolve('Connected to the server.');\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Builds aggregation query based on filters.\n     *\n     * @param filters\n     */\n    function buildAggregationQuery(filters) {\n      // Basic aggregation query.\n      var query = {\n        \"aggs\": {}\n      };\n\n      for (var filterType in filters) {\n        switch (filterType) {\n          case 'taxonomy':\n            var taxonomyFilters = filters[filterType];\n            // Extend query with filter fields.\n            for (var i = 0; i < taxonomyFilters.length; i++) {\n              var filter = taxonomyFilters[i];\n              query.aggs[filter.field] = {\n                \"terms\": {\n                  \"field\": filter.field + '.raw',\n                  \"size\": 0\n                }\n              };\n            }\n            break;\n\n          case 'boolean':\n            var booleanFilters = filters[filterType];\n            for (var i = 0; i < booleanFilters.length; i++) {\n              var filter = booleanFilters[i];\n              query.aggs[filter.field] = {\n                \"terms\": {\n                  \"field\": filter.field,\n                  \"size\": 0\n                }\n              };\n            }\n            break;\n\n          default:\n            console.error('Aggregation filter has unknown type - ' + filterType);\n        }\n      }\n\n      return query;\n    }\n\n    /**\n     * Parse filter configuration and search aggregations.\n     *\n     * Merge result with filters configuration as not all terms may have\n     * been used in the content and then not in found in the search\n     * node.\n     *\n     * @param aggs\n     *\n     * @returns {{}}\n     */\n    function parseFilters(aggs) {\n      var results = {\n        'taxonomy': {},\n        'boolean': {}\n      };\n\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        var filterConfig = CONFIG.provider.filters;\n\n        for (var filterType in filterConfig) {\n          var filters = filterConfig[filterType];\n          for (var i = 0; i < filters.length; i++) {\n            var filter = angular.copy(filters[i]);\n\n            // Set basic filter with counts.\n            results[filterType][filter.field] = {\n              'name': filter.name,\n            };\n\n            if (countProperties(aggs) !== 0) {\n              // Run through counts and update the filters.\n              switch (filterType) {\n                case 'taxonomy':\n                  results[filterType][filter.field].items = filter.terms;\n\n                  for (var j = 0; j < aggs[filter.field].buckets.length; j++) {\n                    var bucket = aggs[filter.field].buckets[j];\n                    if (results[filterType][filter.field].items.hasOwnProperty(bucket.key)) {\n                      results[filterType][filter.field].items[bucket.key].count = Number(bucket.doc_count);\n                    }\n                    else {\n                      console.error('Filter value don\\'t match configuration: ' + filter.field + ' -> ' + bucket.key);\n                    }\n                  }\n                  break;\n\n                case 'boolean':\n                  for (var j = 0; j < aggs[filter.field].buckets.length; j++) {\n                    var bucket = aggs[filter.field].buckets[j];\n\n                    // Set default count for \"true\" to zero.\n                    results[filterType][filter.field].count = 0;\n                    if (bucket.key === 'T' && bucket.doc_count > 0) {\n                      results[filterType][filter.field].count = Number(bucket.doc_count);\n\n                      // Break has true count have been found, if not we don't break. The\n                      // count will be reset to zero.\n                      break;\n                    }\n                  }\n                  break;\n\n                default:\n                  console.error('Unknown filter type used in parseFilters: ' + filterType);\n              }\n            }\n          }\n        }\n      }\n\n      return results;\n    }\n\n    /**\n     * Build boolean filter based on configuration.\n     *\n     * @returns object\n     *   The boolean filter names indexed by field name.\n     */\n    function buildBooleanFilters() {\n      var result = {};\n\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        var filters = CONFIG.provider.filters;\n\n        // Check for boolean filters.\n        if (filters.hasOwnProperty('boolean')) {\n          for (var i = 0; i < filters.boolean.length; i++) {\n            var filter = filters.boolean[i];\n            result[filter.field] = {\n              'name': filter.name,\n            };\n          }\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Get the list of available filters not parsed with search results.\n     *\n     * @return object\n     *  The filters from the configuration.\n     */\n    this.getRawFilters = function getRawFilters() {\n      var result = {};\n\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        var filters = CONFIG.provider.filters;\n\n        // Check for taxonomy filters.\n        if (filters.hasOwnProperty('taxonomy')) {\n          result.taxonomy = {};\n          for (var i = 0; i < filters.taxonomy.length; i++) {\n            var filter = filters.taxonomy[i];\n            // Set basic filter with counts.\n            result.taxonomy[filter.field] = {\n              'name': filter.name,\n              'items': filter.terms\n            };\n          }\n        }\n\n        // Check for boolean filters.\n        result.boolean = buildBooleanFilters();\n      }\n\n      return result;\n    };\n\n    /**\n     * Get the list of available filters.\n     *\n     * @PLAN:\n     *   Check if latest search returned aggregations, if not use the\n     *   configuration to search the get all available aggregations.\n     *\n     *   Merge it with configuration to ensure that all possible filters are\n     *   displayed with count.\n     */\n    this.getFilters = function getFilters() {\n      var deferred = $q.defer();\n\n      // Get filters from configuration.\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        // If no search has been executed yet, load the default filters across\n        // all indexed data.\n        if (currentFilters.taxonomy === undefined) {\n          // Check if filters are cached.\n          var cachedFilters = searchCache.get('filters');\n\n          if (cachedFilters !== undefined) {\n            // Store current filters.\n            currentFilters = cachedFilters;\n\n            // Return the result.\n            deferred.resolve(angular.copy(currentFilters));\n          }\n          else {\n            // Get the query.\n            var query = buildAggregationQuery(CONFIG.provider.filters);\n\n            /**\n             * @TODO: Added forced fields and other search options.\n             */\n\n            // Send the request to search node.\n            connect().then(function () {\n              socket.emit('count', query);\n              socket.once('counts', function (counts) {\n                currentFilters = parseFilters(counts);\n\n                // Store initial filters in cache.\n                searchCache.put('filters', currentFilters);\n\n                // Return the result.\n                deferred.resolve(currentFilters);\n              });\n\n              // Catch search errors.\n              socket.once('searchError', function (error) {\n                console.error('Search error', error.message);\n                deferred.reject(error.message);\n              });\n            });\n          }\n        }\n        else {\n          // Return the result.\n          deferred.resolve(angular.copy(currentFilters));\n        }\n      }\n      else {\n        deferred.resolve({});\n      }\n\n      return deferred.promise;\n    };\n\n    /**\n     * Execute search query.\n     *\n     * @param searchQuery\n     * @returns {*}\n     */\n    this.search = function search(searchQuery) {\n      var deferred = $q.defer();\n\n      // Build default \"match all\" search query.\n      var query = {\n        \"index\": configuration.index,\n        \"query\": {\n          \"filtered\": {\n            \"query\": {\n              \"match_all\": {}\n            }\n          }\n        }\n      };\n\n      // Text given build field search query.\n      // The analyser ensures that we match the who text string sent not part\n      // of.\n      if (searchQuery.text !== undefined && searchQuery.text !== '') {\n        var fields = configuration.fields;\n        // Check if boost exist for the fields.\n        if (configuration.hasOwnProperty('boost') && countProperties(configuration.boost)) {\n          // Add boost to fields.\n          for (var i in fields) {\n            if (configuration.boost.hasOwnProperty(fields[i])) {\n              fields[i] = fields[i] + '^' + configuration.boost[fields[i]];\n            }\n          }\n        }\n\n        query.query.filtered.query = {\n          \"multi_match\": {\n            \"query\": searchQuery.text,\n            \"fields\": fields,\n            \"analyzer\": 'string_search'\n          }\n        };\n      }\n\n      // Add sort fields.\n      if (searchQuery.hasOwnProperty('sort') && countProperties(searchQuery.sort) > 0) {\n        query.sort = {};\n        for (var field in searchQuery.sort) {\n          query.sort[field] = {\n            \"order\": searchQuery.sort[field]\n          };\n        }\n      }\n\n      // Add filter.\n      if (searchQuery.hasOwnProperty('filters')) {\n        var filters = angular.copy(searchQuery.filters);\n\n        // Build query filter.\n        var queryFilter = {\n          \"bool\": {\n            \"must\": []\n          }\n        };\n\n        // Loop over taxonomy filters.\n        if (filters.hasOwnProperty('taxonomy')) {\n          for (var field in filters.taxonomy) {\n            var filter = filters.taxonomy[field];\n            /**\n             * @TODO: Needs to get information from configuration about execution\n             *        type?\n             */\n            var terms = {\n              \"execution\": \"and\"\n            };\n\n            terms[field + '.raw'] = [];\n            for (var term in filter) {\n              // Check the the term is \"true\", hence is selected.\n              if (filter[term]) {\n                terms[field + '.raw'].push(term);\n              }\n            }\n\n            if (terms[field + '.raw'].length) {\n              queryFilter.bool.must.push({ \"terms\": terms });\n            }\n          }\n        }\n\n        // Loop over boolean filters.\n        if (filters.hasOwnProperty('boolean')) {\n          for (var field in filters.boolean) {\n            if (filters.boolean[field]) {\n              var term = {};\n              term[field] = filters.boolean[field];\n              queryFilter.bool.must.push({ \"term\": term });\n            }\n          }\n        }\n\n        // Add the query filter if filled out.\n        if (queryFilter.bool.must.length) {\n          query.query.filtered.filter = queryFilter;\n        }\n      }\n\n      // Add pager to the query.\n      if (searchQuery.hasOwnProperty('pager')) {\n        query.size = searchQuery.pager.size;\n        query.from = searchQuery.pager.page * searchQuery.pager.size;\n      }\n\n      // Check if aggregations/filters counts should be used.\n      if (CONFIG.provider.hasOwnProperty('filters')) {\n        // Get the query.\n        var aggs = buildAggregationQuery(CONFIG.provider.filters);\n        angular.extend(query, aggs);\n      }\n\n      // Add range/interval search to the query.\n      if (searchQuery.hasOwnProperty('intervals')) {\n        // Check if any filters have been defined.\n        if (!query.query.filtered.hasOwnProperty('filter')) {\n          query.query.filtered.filter = {\n            \"bool\": {\n              \"must\": []\n            }\n          };\n        }\n\n        // Loop over the intervals and build range terms.\n        for (var field in searchQuery.intervals) {\n          var interval = {\n            \"range\": {}\n          };\n          interval.range[field] = {\n            \"gte\": searchQuery.intervals[field].from,\n            \"lte\": searchQuery.intervals[field].to\n          };\n          query.query.filtered.filter.bool.must.push(interval);\n        }\n      }\n\n      // Add date interval search.\n      if (searchQuery.hasOwnProperty('dates')) {\n        // Check if any filters have been defined.\n        if (!query.query.filtered.hasOwnProperty('filter')) {\n          query.query.filtered.filter = {\n            \"bool\": {\n              \"should\": [ ]\n            }\n          };\n        }\n        else {\n          query.query.filtered.filter.bool.should = [];\n        }\n\n        // Loop over the intervals and build range terms.\n        for (var field in searchQuery.dates) {\n          var config = configuration.dates[field];\n          var template = {\n            \"bool\": {\n              \"must\": [\n                {\n                  \"range\": {}\n                },\n                {\n                  \"range\": {}\n                }\n              ]\n            }\n          };\n\n          // Overlap start of the interval.\n          template.bool.must[0].range[config.from] = {\n            \"lte\": searchQuery.dates[field].from\n          };\n          template.bool.must[1].range[config.to] = {\n            \"gt\": searchQuery.dates[field].from\n          };\n          query.query.filtered.filter.bool.should.push(angular.copy(template));\n\n          // Overlap end of the interval.\n          template.bool.must[0].range[config.from] = {\n            \"lt\": searchQuery.dates[field].to\n          };\n          template.bool.must[1].range[config.to] = {\n            \"gte\": searchQuery.dates[field].to\n          };\n          query.query.filtered.filter.bool.should.push(angular.copy(template));\n\n          // Overlap both endes of the interval.\n          template.bool.must[0].range[config.from] = {\n            \"gte\": searchQuery.dates[field].from\n          };\n          template.bool.must[1].range[config.to] = {\n            \"lte\": searchQuery.dates[field].to\n          };\n          query.query.filtered.filter.bool.should.push(angular.copy(template));\n        }\n      }\n\n      // Create cache key based on the finale search query.\n      var cid = CryptoJS.MD5(JSON.stringify(query)).toString();\n\n      // Give unique id to the search query.\n      query.uuid = cid;\n\n      // Check cache for hits.\n      var hits = searchCache.get(cid);\n      if (hits !== undefined) {\n        // Update filters cache.\n        if (hits.hasOwnProperty('aggs')) {\n          currentFilters = parseFilters(angular.copy(hits.aggs));\n        }\n\n        deferred.resolve(hits);\n      }\n      else {\n        connect().then(function () {\n\n          /**\n           * Search error handler for this event.\n           */\n          var searchError = function searchError() {\n            console.error('Search error', error.message);\n            deferred.reject(error.message);\n          };\n\n          // Listen to search results.\n          socket.on('result', function (hits) {\n            // Check if this socket message is for this query.\n            if (hits.uuid == query.uuid) {\n              socket.removeListener('result', this);\n              socket.removeListener('searchError', searchError);\n\n              // Update cache filters cache, based on the current search result.\n              if (hits.hasOwnProperty('aggs')) {\n                // Store current filters.\n                currentFilters = parseFilters(angular.copy(hits.aggs));\n              }\n\n              // Get uuid and remove it before cache.\n              var uuid = hits.uuid;\n              delete hits.uuid;\n\n              // Save hits in cache (use uuid as it's it the cache id).\n              searchCache.put(uuid, hits);\n\n              deferred.resolve(hits);\n            }\n          });\n\n          // Catch search errors.\n          socket.on('searchError', searchError);\n\n          // Send query.\n          socket.emit('search', query);\n        });\n      }\n\n      return deferred.promise;\n    };\n  }\n]);\n","/**\n * @file\n * Service to communication between search box and search result applications.\n */\n\nangular.module('communicationService', [])\n  .service('communicatorService', function($rootScope, $window){\n    'use strict';\n\n    // Store rootScopes for each service user.\n    $window.rootScopes = $window.rootScopes || [];\n    $window.rootScopes.push($rootScope);\n\n    /**\n     * Wrapper for emitting events to all root scopes.\n     *\n     * @param name\n     *   Event name\n     * @param args\n     *   Event arguments.\n     */\n    this.$emit = function emit(name, args) {\n      angular.forEach($window.rootScopes, function(scope) {\n        scope.$emit(name, args);\n      });\n    };\n\n    /**\n     * Wrapper to attach event listeners to the current root scope.\n     *\n     * @param name\n     *   Event name.\n     * @param listener\n     *   The listener to call on event.\n     */\n    this.$on = function on(name, listener) {\n      $rootScope.$on(name, function (event, message) {\n        listener.apply($rootScope, [event, message]);\n      });\n    };\n  });","/**\n * @file\n * Search proxy.\n *\n * Allows the framework to use different search back-ends based on\n * configuration settings.\n */\n\n/**\n * Search proxy is used to send search requests to the configured provider.\n */\nangular.module('searchBoxApp').service('searchProxyService', ['CONFIG', 'communicatorService', '$injector',\n  function (CONFIG, communicatorService, $injector) {\n    'use strict';\n\n    // Load provider based on configuration.\n    var provider = $injector.get(CONFIG.provider.service);\n\n    /**\n     * Find the size of given object.\n     *\n     * @return int\n     *   The size of the object or 0 if empty.\n     */\n    function countProperties(obj) {\n      var size = 0;\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          size++;\n        }\n      }\n\n      return size;\n    }\n\n    /**\n     * Encode the query object into a string.\n     *\n     * @param query\n     *   The query object.\n     *\n     * @return string\n     *   The encoded string that can been used as hash tag in url.\n     */\n    function encodeSearchQuery(query) {\n      var parts = [];\n\n      // Search text.\n      if (query.hasOwnProperty('text') && query.text.length !== 0) {\n        parts.push('text=' + encodeURIComponent(query.text));\n      }\n\n      // Filters.\n      if (query.hasOwnProperty('filters')) {\n        for (var type in query.filters) {\n          if (countProperties(query.filters[type]) !== 0) {\n            var filter = query.filters[type];\n            var filterParts = [];\n            for (var field in filter) {\n              var selected = [];\n\n              // Check if it's a simple boolean filter.\n              if (typeof filter[field] === \"boolean\" && filter[field] === true) {\n                filterParts.push(field);\n              }\n              else {\n                // Multi level filters (taxonomy).\n                for (var i in filter[field]) {\n                  if (filter[field][i] === true) {\n                    selected.push(i);\n                  }\n                }\n\n                // Only add the filter if filter have selections.\n                if (selected.length) {\n                  filterParts.push(field + ':' + selected.join(';'));\n                }\n              }\n            }\n\n            // Only encode filters if any have be selected.\n            if (filterParts.length) {\n              parts.push('filters[' + type + ']=' + encodeURIComponent(filterParts.join('?')));\n            }\n          }\n        }\n      }\n\n      // Interval search.\n      if (query.hasOwnProperty('intervals') && countProperties(query.intervals) !== 0) {\n        var intervalParts = [];\n        for (var field in query.intervals) {\n          var interval = query.intervals[field];\n          intervalParts.push(field + ';' + interval.from + ';' + interval.to);\n        }\n        parts.push('intervals=' + encodeURIComponent(intervalParts.join('?')));\n      }\n\n      // Date search.\n      if (query.hasOwnProperty('dates') && countProperties(query.dates) !== 0) {\n        // @TODO: This is the same as for intervals. Refactor into function or\n        // loop over type.\n        var dateParts = [];\n        for (var field in query.dates) {\n            var date = query.dates[field];\n          dateParts.push(field + ';' + date.from + ';' + date.to);\n        }\n        parts.push('dates=' + encodeURIComponent(dateParts.join('?')));\n      }\n\n      // Pager page.\n      if (query.hasOwnProperty('pager')) {\n        parts.push('pager=' + query.pager.page + ':' + query.pager.size);\n      }\n\n      return parts.join('&');\n    }\n\n    /**\n     * Decode the hash tag string into search query object.\n     *\n     * @param string\n     *   The encode string that can be used as hash tag in url.\n     *\n     * @return object\n     *   Search query object.\n     */\n    function decodeSearchQuery(string) {\n      var query = {};\n\n      // Get parts.\n      var parts = string.substr(2).split('&');\n      for (var part in parts) {\n        // Decode the type identifier.\n        var subParts = parts[part].split('=');\n        var type = decodeURIComponent(subParts[0]);\n        if (type.indexOf('[') !== -1) {\n          type = type.substr(0, type.indexOf('['));\n        }\n\n        switch (type) {\n          case 'text':\n            query.text = decodeURIComponent(subParts[1]);\n            break;\n\n          case 'filters':\n            var str = decodeURIComponent(subParts[0]);\n            var filterType = str.substr(str.indexOf('[') + 1).slice(0, -1);\n            var filters = decodeURIComponent(subParts[1]).split('?');\n\n            if (filters.length) {\n              // Initialize the filters on the query object.\n              if (!query.hasOwnProperty('filters')) {\n                query.filters = {\n                  'taxonomy': {},\n                  'boolean': {}\n                };\n              }\n\n              for (var i in filters) {\n                switch (filterType) {\n                  case 'taxonomy':\n                    var filter = filters[i].split(':');\n                    // Reduce the array values into an object.\n                    query.filters[filterType][filter[0]] = filter[1].split(';').reduce(function (obj, val, index) {\n                      obj[val] = true;\n                      return obj;\n                    }, {});\n                    break;\n\n                  case 'boolean':\n                    query.filters[filterType][filters[i]] = true;\n                    break;\n\n                  default:\n                    console.error('Decoding of search hash has unknown filter type - ' + filterType);\n                }\n\n              }\n            }\n            break;\n\n          case 'intervals':\n            var intervals = decodeURIComponent(subParts[1]).split('?');\n            if (intervals.length) {\n              query.intervals = {};\n              for (var i in intervals) {\n                var interval = intervals[i].split(';');\n                query.intervals[interval[0]] = {\n                  'from': interval[1],\n                  'to': interval[2]\n                };\n              }\n            }\n            break;\n\n          // @TODO: This is the same as for intervals. Refactor into function.\n          case 'dates':\n            var dates = decodeURIComponent(subParts[1]).split('?');\n            if (dates.length) {\n              query.dates = {};\n              for (var i in dates) {\n                var date = dates[i].split(';');\n                query.dates[date[0]] = {\n                  'from': date[1],\n                  'to': date[2]\n                };\n              }\n            }\n            break;\n\n          case 'pager':\n            var pager = subParts[1].split(':');\n            query.pager = {\n              'page': Number(pager[0]),\n              'size': Number(pager[1])\n            };\n            break;\n\n          default:\n            console.error('Decoding of search hash has unknown parts - ' + subParts[0]);\n        }\n      }\n\n      return query;\n    }\n\n    /**\n     * Get basic information about the search state.\n     *\n     * @return object\n     *  The last query form hash tag and default filters.\n     */\n    this.getState = function getState() {\n      var state = {\n        'filters': this.getRawFilters()\n      };\n\n      var hash = window.location.hash;\n      if (hash.length > 2) {\n         state.query = decodeSearchQuery(hash);\n      }\n\n      return state;\n    };\n\n    /**\n     * Search the provider loaded.\n     *\n     * This simply forwards the search request to the provider loaded.\n     *\n     * @param searchQuery\n     *   The search query.\n     * @param byPassUrlEncode\n     *   Don't encode the query in the browsers URL. Default false.\n     *\n     * @returns {Number|*|Object}\n     *   The search result.\n     */\n    this.search = function search(searchQuery, byPassUrlEncode) {\n      byPassUrlEncode = (typeof byPassUrlEncode === 'undefined') ? false : byPassUrlEncode;\n\n      // Ensure that forced fields and other changes are not reflected in the\n      // UI.\n      var query = angular.copy(searchQuery);\n\n      // Ensure that intervals are set in the configuration and have both from\n      // and to values.\n      if (CONFIG.provider.hasOwnProperty('intervals') && CONFIG.provider.intervals.length) {\n        if (query.hasOwnProperty('intervals')) {\n          for (var field in query.intervals) {\n            // Check if both from and to exists.\n            // @TODO: Review - This can be flipped to avoid the \"empty\" if - continue does nothing :)\n            if (!(query.intervals[field].hasOwnProperty('from') && query.intervals[field].from !== '') &&\n                !(query.intervals[field].hasOwnProperty('to') && query.intervals[field].to !== '')) {\n              // Remove invalidated interval.\n              delete query.intervals[field];\n            }\n          }\n        }\n      }\n      else {\n        // Configuration does not have intervals.\n        if (query.hasOwnProperty('intervals')) {\n          delete query.intervals;\n        }\n      }\n\n      // Keep track of the current URL.\n      if (!byPassUrlEncode) {\n        window.location.hash = encodeSearchQuery(query);\n      }\n\n      // Force search filters form configuration (predefined filters).\n      if (CONFIG.provider.hasOwnProperty('force') && CONFIG.provider.force.length) {\n        // If the query has been loaded form the URL, it may not have any\n        // selected filters, hence no filters on the query object.\n        if (!query.hasOwnProperty('filters')) {\n          query.filters = {};\n        }\n\n        var forces = CONFIG.provider.force;\n        for (var i in forces) {\n          var force = forces[i];\n\n          // Check filter type.\n          if (!query.filters.hasOwnProperty(force.type)) {\n            query.filters[force.type] = {};\n          }\n\n          // Check if user have selected filter, if not init it.\n          if (!query.filters.hasOwnProperty(force.field)) {\n            query.filters[force.type][force.field] = {};\n          }\n\n          // Insert the forced field values.\n          for (var j in force.values) {\n            query.filters[force.type][force.field][force.values[j]] = true;\n          }\n        }\n      }\n\n      return provider.search(query);\n    };\n\n    /**\n     * Get filters provided by configuration.\n     *\n     * @returns json\n     */\n    this.getRawFilters = function getRawFilters() {\n      return provider.getRawFilters();\n    };\n\n    /**\n     * Get filters provided by search engine used.\n     *\n     * @returns json\n     */\n    this.getFilters = function getFilters() {\n      return provider.getFilters();\n    };\n  }\n]);\n"],"sourceRoot":"/source/"}