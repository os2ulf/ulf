<?php

/**
 * Set weight of the ulf_forms module to 999.
 */
function ulf_workflow_update_7100() {
  db_update('system')
    ->fields(array('weight' => 999))
    ->condition('name', 'ulf_workflow', '=')
    ->execute();
}


/**
 * Set weight of the ulf_forms module to 1001.
 */
function ulf_workflow_update_7200() {
  db_update('system')
    ->fields(array('weight' => 1001))
    ->condition('name', 'ulf_workflow', '=')
    ->execute();
}


/**
 * Set variable for checking to send mail.
 */
function ulf_workflow_update_7300() {
  variable_set('workflow_send_mail', FALSE);
}

/**
 * Set variable for checking to send mail.
 */
function ulf_workflow_update_7400() {
  variable_set('ulf_workflow_send_mail', FALSE);
}

/**
 * Set variable for checking to send mail.
 */
function ulf_workflow_update_7500() {
  variable_set('ulf_workflow_send_mail', 0);
}

/**
 * Set variable for checking recipient email.
 */
function ulf_workflow_update_7600() {
  variable_set('ulf_workflow_local_recipient', 1);
}

/**
 * Enable View bulk operation adn page_manager_redirect.
 */
function ulf_workflow_update_7601() {
  $module_enable = array(
    'page_manager_redirect',
    'views_bulk_operations',
  );

  module_enable($module_enable);
}

/**
 * Remove schedule for un-publishing if course is 'full_year', rebuild un-publish dates for all others
 */
function ulf_workflow_update_7602() {
  if (db_table_exists('scheduler') && db_table_exists('scheduler_notify')) {

    // Table content is assumed of of sync
    db_truncate('scheduler')->execute();
    db_truncate('scheduler_notify')->execute();

    $query = new EntityFieldQuery;

    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', array('course', 'course_educators'), 'IN')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_period_full_year', 'value', 0);

    $results = $query->execute();

    if (isset($results['node'])) {
      $nodes = node_load_multiple(array_keys($results['node']));

      foreach ($nodes as $node) {
        if (isset($node->field_period['und']['0']['value2'])) {
          // Get to date from period field.
          $period_timestamp_to_date = $node->field_period['und']['0']['value2'];

          // Register timestamp a week prior for sending email.
          $week_prior = $period_timestamp_to_date - 604800;

          // Create new entry from nid.
          db_insert('scheduler')
            ->fields(array(
              'nid' => $node->nid,
              'publish_on' => 0,
              'unpublish_on' => $period_timestamp_to_date,
            ))
            ->execute();

          if($week_prior > time()) {
            // Create new entry from form state.
            db_insert('scheduler_notify')
              ->fields(array(
                'nid' => $node->nid,
                'uid' => $node->uid,
                'send_mail_on' => $week_prior,
              ))
              ->execute();
          }
        }
      }
    }

  }
}

/**
 * Update period end date for all nodes with full year checked.
 */
function ulf_workflow_update_7603() {
  $result = array();
  if (db_table_exists('scheduler') && db_table_exists('field_data_field_period_full_year')) {
    $result = db_select('field_data_field_period_full_year', 'f')
      ->fields('f', array('entity_id'))
      ->condition('field_period_full_year_value', '1','=')
      ->execute()
      ->fetchAll();
  }

  foreach ($result as $value) {
    $nid = $value->entity_id;
    db_update('field_data_field_period')
      ->fields(array('field_period_value2' => 1893452400))
      ->condition('entity_id', $nid, '=')
      ->execute();
  }
}
