<?php

/**
 * Set weight of the ulf_forms module to 999.
 */
function ulf_workflow_update_7100() {
  db_update('system')
    ->fields(array('weight' => 999))
    ->condition('name', 'ulf_workflow', '=')
    ->execute();
}


/**
 * Set weight of the ulf_forms module to 1001.
 */
function ulf_workflow_update_7200() {
  db_update('system')
    ->fields(array('weight' => 1001))
    ->condition('name', 'ulf_workflow', '=')
    ->execute();
}


/**
 * Set variable for checking to send mail.
 */
function ulf_workflow_update_7300() {
  variable_set('workflow_send_mail', FALSE);
}

/**
 * Set variable for checking to send mail.
 */
function ulf_workflow_update_7400() {
  variable_set('ulf_workflow_send_mail', FALSE);
}

/**
 * Set variable for checking to send mail.
 */
function ulf_workflow_update_7500() {
  variable_set('ulf_workflow_send_mail', 0);
}

/**
 * Set variable for checking recipient email.
 */
function ulf_workflow_update_7600() {
  variable_set('ulf_workflow_local_recipient', 1);
}

/**
 * Enable View bulk operation adn page_manager_redirect.
 */
function ulf_workflow_update_7601() {
  $module_enable = array(
    'page_manager_redirect',
    'views_bulk_operations',
  );

  module_enable($module_enable);
}

/**
 * Remove schedule for un-publishing if course is 'full_year'
 */
function ulf_workflow_update_7602() {
  if (db_table_exists('scheduler') && db_table_exists('scheduler_notify')) {

    // course
    $query = new EntityFieldQuery;

    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'course')
      ->fieldCondition('field_period_full_year', 'value', 1);

    $results = $query->execute();

    if (isset($results['node'])) {
      foreach ($results['node'] as $node) {
        // Remove old nid entry element.
        db_delete('scheduler')
          ->condition('nid', $node->nid)
          ->execute();

        // Remove old node entry from scheduled notifications so we don't create more entries for sending "a week prior mail".
        db_delete('scheduler_notify')
          ->condition('nid', $node->nid)
          ->execute();
      }
    }

    // course_educators
    $query = new EntityFieldQuery;

    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'course_educators')
      ->fieldCondition('field_period_full_year', 'value', 1);

    $results = $query->execute();

    if (isset($results['node'])) {
      foreach ($results['node'] as $node) {
        // Remove old nid entry element.
        db_delete('scheduler')
          ->condition('nid', $node->nid)
          ->execute();

        // Remove old node entry from scheduled notifications so we don't create more entries for sending "a week prior mail".
        db_delete('scheduler_notify')
          ->condition('nid', $node->nid)
          ->execute();
      }
    }

  }

}