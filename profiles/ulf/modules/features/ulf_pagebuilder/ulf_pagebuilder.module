<?php
/**
 * @file
 * Code for the Ulf Pagebuilder feature.
 */

include_once 'ulf_pagebuilder.features.inc';

/**
 * Implements hook_theme().
 */
function ulf_pagebuilder_theme() {
  return [
    // file.module.
    'file_download_link' => [
      'variables' => ['file' => NULL, 'icon_directory' => NULL],
    ],
  ];
}

/**
 * Implements hook_field_formatter_info().
 */
function ulf_pagebuilder_field_formatter_info() {
  return [
    'file_download' => [
      'label' => t('Download file link'),
      'field types' => ['file'],
    ],
  ];
}

/**
 * Implements hook_field_formatter_view().
 */
function ulf_pagebuilder_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = [];

  switch ($display['type']) {
    case 'file_download':
      foreach ($items as $delta => $item) {
        $element[$delta] = [
          '#theme' => 'file_download_link',
          '#file' => (object) $item,
        ];
      }
      break;
  }

  return $element;
}

/**
 * Returns HTML for a link to a file.
 *
 * @param $variables
 *   An associative array containing:
 *   - file: A file object to which the link will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     files. Defaults to the value of the "file_icon_directory" variable.
 *
 * @ingroup themeable
 */
function theme_file_download_link($variables) {
  $file = $variables['file'];
  $icon_directory = $variables['icon_directory'];

  $url = file_create_url($file->uri);

  // Human-readable names, for use as text-alternatives to icons.
  $mime_name = [
    'application/msword' => t('Microsoft Office document icon'),
    'application/vnd.ms-excel' => t('Office spreadsheet icon'),
    'application/vnd.ms-powerpoint' => t('Office presentation icon'),
    'application/pdf' => t('PDF icon'),
    'video/quicktime' => t('Movie icon'),
    'audio/mpeg' => t('Audio icon'),
    'audio/wav' => t('Audio icon'),
    'image/jpeg' => t('Image icon'),
    'image/png' => t('Image icon'),
    'image/gif' => t('Image icon'),
    'application/zip' => t('Package icon'),
    'text/html' => t('HTML icon'),
    'text/plain' => t('Plain text icon'),
    'application/octet-stream' => t('Binary Data'),
  ];

  $mimetype = file_get_mimetype($file->uri);

  $icon = theme(
    'file_icon', [
      'file' => $file,
      'icon_directory' => $icon_directory,
      'alt' => !empty($mime_name[$mimetype]) ? $mime_name[$mimetype]
        : t('File'),
    ]
  );

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = [
    'attributes' => [
      'type' => $file->filemime . '; length=' . $file->filesize,
      'target' => '_blank',
    ],
  ];

  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text = t('Download @filename', ['@filename' => $file->filename]);
  }
  else {
    $link_text = t('Download @filename', ['@filename' => $file->description]);
    $options['attributes']['title'] = check_plain($file->filename);
  }

  return '<span class="file">' . $icon . ' ' . l($link_text, $url, $options)
    . '</span>';
}

/**
 * Implementation of HOOK_form_alter()
 */
function ulf_pagebuilder_form_alter(&$form, $form_state, $form_id) {


  if ($form_id === 'page_with_blocks_node_form') {

    /**
     * Copy the action buttons (submit, preview, etc ..)
     * and place them at the top of the form
     */
    if (!empty($form['actions'])) {

      foreach ($form['actions'] as $name => $button) {
        // SUBMIT BUTTON
        if ($name === 'submit') {
          // WE NEED TO USE DOUBLE QUOTATION MARKS
          // SO PHP CAN SEE AND INTERPRET VARIABLES WITHIN
          $form["$name-copy"] = $button;
          $form["$name-copy"]['#weight'] = -1001;
        }

        // PREVIEW BUTTON
        if ($name === 'preview') {
          // WE NEED TO USE DOUBLE QUOTATION MARKS
          // SO PHP CAN SEE AND INTERPRET VARIABLES WITHIN
          $form["$name-copy"] = $button;
          $form["$name-copy"]['#weight'] = -1000;
        }

        // CHANGES DEPENDS ON DIFF MODULE
        if ($name === 'preview_changes') {
          // WE NEED TO USE DOUBLE QUOTATION MARKS
          // SO PHP CAN SEE AND INTERPRET VARIABLES WITHIN
          $form["$name-copy"] = $button;
          $form["$name-copy"]['#weight'] = -999;
        }

        // DELETE BUTTON
        if ($name === 'delete') {
          // WE NEED TO USE DOUBLE QUOTATION MARKS
          // SO PHP CAN SEE AND INTERPRET VARIABLES WITHIN
          $form["$name-copy"] = $button;
          $form["$name-copy"]['#weight'] = -998;
        }

      } // end foreach
    }
  }

}
