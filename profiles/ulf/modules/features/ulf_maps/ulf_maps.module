<?php
/**
 * @file
 * Code for the Ulf maps feature.
 */

include_once 'ulf_maps.features.inc';

/**
 * Implements hook_form_alter().
 */
function ulf_maps_form_alter(&$form, &$form_state, $form_id) {
  // The form ids of the forms to alter.
  $form_ids = array(
    'user_profile_form',
    'course_node_form',
    'course_educators_node_form',
    'internship_node_form',
    'education_node_form',
  );

  // We have location information in the user profiles and there the location
  // module don't allow use to move it inside the a field_group, so we do it
  // right here.
  if ($form_id == 'user_profile_form') {
    // If location modules are set up.
    if (isset($form['locations'])) {
      // Add fieldset around location to have a better form.
      $form['#groups']['group_placement']->children[] = 'locations';
      $form['#fieldgroups']['group_placement']->children[] = 'locations';
      $form['#group_children']['locations'] = 'group_placement';
      $form['locations']['#weight'] = 30;
    }
  }

  // Check if the JS should be added to the form and also send user (provider)
  // location information into JS to allow for a better UX.
  if (in_array($form_id, $form_ids)) {
    if (isset($form['locations'])) {
      // Attach js to the form.
      $form['#attached']['js'][] = drupal_get_path('module', 'ulf_maps') . '/js/ulf_maps.admin.js';
      $form['#attached']['css'][] = drupal_get_path('module', 'ulf_maps') . '/css/ulf_maps.admin.css';

      // Load provider information and save it in Drupal settings, so
      // available for JS during form editing.
      if (!empty($form['uid']['#value'])) {
        $author = user_load($form['uid']['#value']);
        if(isset($author->locations['0'])) {
          $form['#attached']['js'][] = array(
            'data' => array(
              'ulf_maps' => array(
                'is_new' => $form['nid']['#value'] == NULL,
                'provider' => array(
                  'street' => $author->locations['0']['street'],
                  'additional' => $author->locations['0']['additional'],
                  'postal_code' => $author->locations['0']['postal_code'],
                  'city' => $author->locations['0']['city'],
                ),
              ),
            ),
            'type' => 'setting',
          );
        }
      }

      // Extra submit handler to ensure that content selected to not be
      // displayed in map searches have their coordinates removed. Also
      // handle new nodes with provider address selected.
      array_unshift($form['#submit'], '_ulf_maps_profile_submit');
    }
  }
}

/**
 * Implements hook_submit().
 *
 * Reset location if address depending on value og place_settings selector false
 */
function _ulf_maps_profile_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Find selected map placement choice.
  if (isset($values['field_map_placement'])) {
    $choice = $values['field_map_placement'][LANGUAGE_NONE][0]['value'];
  }
  else {
    $choice = $values['field_profile_map_placement'][LANGUAGE_NONE][0]['value'];
  }

  switch ($choice) {
    case 'provider':
      // If it's an new node and the provider is selected as address. Lookup the
      // provider address form the user field and fill in the fields.
      if (is_null($values['nid'])) {
        if ($account = user_load_by_name($values['name'])) {
          $form_state['values']['locations'][0]['name'] = isset($account->location['name']) ? $account->location['name'] : '';
          $form_state['values']['locations'][0]['street'] = isset($account->location['street']) ? $account->location['street'] : '';
          $form_state['values']['locations'][0]['city'] = isset($account->location['city']) ? $account->location['city'] : '';
          $form_state['values']['locations'][0]['postal_code'] = isset($account->location['postal_code']) ? $account->location['postal_code'] : '';
        }
      }
      break;

    case 'hide':
      // If the selection is to hide it on the search map (reset coordinates).
      $form['locations'][0]['locpick']['user_latitude']['#value'] = '0.000000';
      $form['locations'][0]['locpick']['user_longitude']['#value'] = '0.000000';

      // Update default values with the new values.
      $form['locations'][0]['#default_value']['latitude'] = '0.000000';
      $form['locations'][0]['#default_value']['longitude'] = '0.000000';
      $form_state['values']['locations'][0]['locpick']['user_latitude'] = '0.000000';
      $form_state['values']['locations'][0]['locpick']['user_longitude'] = '0.000000';

      // Update map information with new location.
      $form['locations'][0]['locpick']['map']['#gmap_settings']['latitude'] = '0.000000';
      $form['locations'][0]['locpick']['map']['#gmap_settings']['longitude'] = '0.000000';
      $form['locations'][0]['locpick']['map']['#gmap_settings']['latlong'] = '0.000000' . ',' . '0.000000';
      $form['locations'][0]['locpick']['current']['current_latitude']['#markup'] = '0.000000';
      $form['locations'][0]['locpick']['current']['current_longitude']['#markup'] = '0.000000';
      break;
  }
}
