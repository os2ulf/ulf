<?php
/**
 * @file
 * Used to modify different forms on the site.
 */

/**
 * Implements hook_form_alter().
 */
function ulf_forms_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node_edit_form'])) {
    $path = drupal_get_path('module', 'ulf_forms');
    $form['#attached']['js'][] = $path . '/js/jquery.imagesloaded.js';
    $form['#attached']['js'][] = $path . '/js/jquery.imgareaselect.dev.js';
    $form['#attached']['css'][] = $path . '/css/node-form-styles.css';
  }

  switch ($form_id) {
    // Course node form.
    case 'course_node_form':
      $form['#attached']['js'][] = $path . '/js/node-form-logics.js';

      // Assist on node add.
      if (empty($form['nid']['#value'])) {
        $message_required = '<p>' . t('Required fields are marked with a star and can be found in the "Practical information" field group.') . '</p>';
        drupal_set_message($message_required);
      }

      // Assist on lacking image.
      if ($form_state['field']['field_image'][LANGUAGE_NONE]['items_count'] == 0) {
        $message_image = '<p>' . t('You will need to add an image to your course, before the content can be published.') . '</p>';
        drupal_set_message($message_image);
      }

      // Latest moderation log.
      if (!empty($form['vid']['#value'])) {
        $latest_log_message = t('Latest message') . ': ' . ulf_forms_fetch_moderation_log_latest($form['vid']['#value']);
        drupal_set_message($latest_log_message);
      }

      $form['#validate'][] = '_vat_not_empty_validate';

      $form['#prefix'] = '<div class="node--form is-default-form">';
      $form['#suffix'] = '</div>';
      break;

    // Course educators node form.
    case 'course_educators_node_form':
      $form['#attached']['js'][] = $path . '/js/node-form-logics.js';
      $form['#prefix'] = '<div class="node--form is-default-form">';
      $form['#suffix'] = '</div>';

      $form['#validate'][] = '_vat_not_empty_validate';
      break;

    // User anonymous forms (Login, request pass and create account)
    case 'user_pass':
      $form['#prefix'] = '<div class="form-module--user-login">';
      $form['#suffix'] = '</div>';
      $form['actions']['submit']['#attributes']['class'][] = 'form-module--user-submit';
      break;

    case 'user_register_form':
      $form['#prefix'] = '<div class="form-module--user-login">';
      $form['#suffix'] = '</div>';
      $form['actions']['submit']['#attributes']['class'][] = 'form-module--user-submit';
      break;

    case 'user_profile_form':
      global $user;
      if ($user->uid != 1) {
        $form['mimemail']['#access'] = FALSE;
        $form['locale']['#access'] = FALSE;
      }
      break;

    case 'user_login':
      $form['#prefix'] = '<div class="form-module--user-login">';
      $form['#suffix'] = '</div>';
      $form['actions']['submit']['#attributes']['class'][] = 'form-module--user-submit';
      break;
  }
}

/**
 * Custom validation to ensure VAT value being set if a price is set.
 *
 * @param $form
 * @param $form_state
 */
function _vat_not_empty_validate($form, &$form_state) {
  foreach ($form_state['values']['field_collection_price'][LANGUAGE_NONE] as $delta => $value) {
    if (!empty($value['field_price'][LANGUAGE_NONE][0]['value']) &&
      empty($value['field_moms'][LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_collection_price][' . LANGUAGE_NONE . '][' . $delta . '][field_moms', t('You must set a VAT value to save your changes.'));
    }
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 *
 * Set wysiwyg textarea height.
 */
function ulf_forms_wysiwyg_editor_settings_alter(&$settings, $context) {
  if($context['profile']->editor == 'ckeditor') {
    $settings['height'] = 200;
  }
} 

/**
 * Fetch the latest moderation log.
 */
function ulf_forms_fetch_moderation_log_latest($vid) {
  $result = db_select('node_revision', 'n')
    ->fields('n', array('log'))
    ->condition('vid', $vid,'=')
    ->execute()
    ->fetchAssoc();
  return $result['log'];
}