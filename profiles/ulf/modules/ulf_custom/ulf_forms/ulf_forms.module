<?php
/**
 * @file
 * Used to modify different forms on the site.
 */

/**
 * Implements hook_form_alter().
 */
function ulf_forms_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#node_edit_form'])) {
    $path = drupal_get_path('module', 'ulf_forms');
    $form['#attached']['js'][] = $path . '/js/jquery.imagesloaded.js';
    $form['#attached']['js'][] = $path . '/js/jquery.imgareaselect.dev.js';
    $form['#attached']['css'][] = $path . '/css/node-form-styles.css';
  }

  switch ($form_id) {
    // Course node form.
    case 'course_node_form':
      $form['intro_information']['#weight'] = -10;
      $form['intro_information']['#markup'] = '<div class="messages status">';
      $form['#attached']['js'][] = $path . '/js/node-form-logics.js';

      _ulf_forms_set_intro_text($form, $form_state);

      $form['#validate'][] = '_vat_not_empty_validate';

      $form['#prefix'] = '<div class="node--form is-default-form">';
      $form['#suffix'] = '</div>';
      $form['intro_information']['#markup'] .= '</div>';
      break;

    // Course educators node form.
    case 'course_educators_node_form':
      $form['intro_information']['#weight'] = -10;
      $form['intro_information']['#markup'] = '<div class="messages status">';

      _ulf_forms_set_intro_text($form, $form_state);

      $form['#attached']['js'][] = $path . '/js/node-form-logics.js';
      $form['#prefix'] = '<div class="node--form is-default-form">';
      $form['#suffix'] = '</div>';

      // Set class on field_relevance_educators to make it a multidimensional select. See js attached below.
      $form['field_relevance_educators']['#attributes']['class'][] = 'ulf-forms--multidimensional-select';
      $form['#attached']['js'][] = $path . '/js/modify_select.js';
      $form['#validate'][] = '_vat_not_empty_validate';
      $primary_target_group_vocab = taxonomy_vocabulary_machine_name_load('course_relevancy_educators');
      if ($primary_target_group_vocab) {
        $primary_target_group_references = taxonomy_get_tree($primary_target_group_vocab->vid, 0, NULL, TRUE);
        drupal_add_js(drupal_get_path('module', 'ulf_forms') . '/js/course_target_group_select.js');
        drupal_add_js(array('primary_target_group' => array('vocabulary' => $primary_target_group_references)), 'setting');
      }
      // Vocabulary id as attribute to taxonomy references.
      foreach ($form as $key => $element) {
        if (is_array($element)) {
          if (isset($element[LANGUAGE_NONE]) && isset($element[LANGUAGE_NONE]['#value_key'])) {
            if ($element[LANGUAGE_NONE]['#value_key'] == 'tid') {
              $vocabulary = field_info_field($element[LANGUAGE_NONE]['#field_name'])['settings']['allowed_values'][0]['vocabulary'];
              $form[$key]['#attributes']['data-vocabulary-id'][] = taxonomy_vocabulary_machine_name_load($vocabulary)->vid;
            }
          }
        }
      }
      $form['intro_information']['#markup'] .= '</div>';
      break;

    // User anonymous forms (Login, request pass and create account)
    case 'user_pass':
      $form['#prefix'] = '<div class="form-module--user-login">';
      $form['#suffix'] = '</div>';
      $form['actions']['submit']['#attributes']['class'][] = 'form-module--user-submit';
      break;

    case 'user_register_form':
      $form['#prefix'] = '<div class="form-module--user-login">';
      $form['#suffix'] = '</div>';
      $form['actions']['submit']['#attributes']['class'][] = 'form-module--user-submit';
      break;

    case 'user_profile_form':
      global $user;
      if ($user->uid != 1) {
        $form['mimemail']['#access'] = FALSE;
        $form['locale']['#access'] = FALSE;
      }
      break;

    case 'user_login':
      $form['#prefix'] = '<div class="form-module--user-login">';
      $form['#suffix'] = '</div>';
      $form['actions']['submit']['#attributes']['class'][] = 'form-module--user-submit';
      break;
  }

}

/**
 * Custom validation to ensure VAT value being set if a price is set.
 *
 * @param $form
 * @param $form_state
 */
function _vat_not_empty_validate($form, &$form_state) {
  foreach ($form_state['values']['field_collection_price'][LANGUAGE_NONE] as $delta => $value) {
    if (!empty($value['field_price'][LANGUAGE_NONE][0]['value']) &&
      empty($value['field_moms'][LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_collection_price][' . LANGUAGE_NONE . '][' . $delta . '][field_moms', t('You must set a VAT value to save your changes.'));
    }
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 *
 * Set wysiwyg textarea height.
 */
function ulf_forms_wysiwyg_editor_settings_alter(&$settings, $context) {
  if($context['profile']->editor == 'ckeditor') {
    $settings['height'] = 200;
  }
}

/**
 * Fetch the latest moderation log.
 */
function ulf_forms_fetch_moderation_log_latest($nid) {
  $query = db_select('node_revision', 'n');
  $query->fields('n', array('nid', 'log'));
  $query->condition('n.nid', $nid, '=');
  $query->condition('n.log', '', '<>');
  $query->orderby('n.vid','DESC');
  $query->range(0,1);
  $result = $query->execute()->fetchCol(1);
  return $result[0];
}

function _ulf_forms_set_intro_text(&$form, $form_state) {
  // Assist on node add.
  if (empty($form['nid']['#value'])) {
    $message_required = '<div>' . t('Required fields are marked with a star and can be found in the "Practical information" field group.') . '</div>';
    $form['intro_information']['#markup'] .= $message_required;
  }

  // Assist on lacking image.
  if ($form_state['field']['field_image'][LANGUAGE_NONE]['items_count'] == 0) {
    $message_image = '<div>' . t('You will need to add an image to your course, before the content can be published.') . '</div>';
    $form['intro_information']['#markup'] .= $message_image;
  }

  // Latest moderation log.
  if (!empty($form['vid']['#value'])) {
    $latest_log_message = '<div>' . t('Latest message') . ': ' . ulf_forms_fetch_moderation_log_latest($form['nid']['#value']) . '</div>';
    $form['intro_information']['#markup'] .= $latest_log_message;
  }
}