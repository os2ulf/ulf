<?php
/**
 * @file
 * Used to modify different forms on the site.
 */

/**
 * Implements hook_form_alter().
 *
 * Modify forms
 */
function ulf_forms_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $form['#attached']['js'] = array();
  $form['#attached']['css'][] = drupal_get_path('module', 'ulf_forms') . '/css/node-form-styles.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'ulf_forms') . '/js/node-form-logics.js';
  $form['#attached']['js'][] = drupal_get_path('module', 'ulf_forms') . '/js/jquery.imagesloaded.js';
  $form['#attached']['js'][] = drupal_get_path('module', 'ulf_forms') . '/js/jquery.imgareaselect.dev.js';

  if (in_array('course provider', $user->roles) || in_array('editor', $user->roles)) {
    $form['#attached']['js'][] = drupal_get_path('module', 'ulf_forms') . '/js/hide-rich-text-selection.js';
  }

  switch ($form_id) {

  // Course node form.
  case 'course_node_form':
    // Assist on node add.
    if (empty($form['nid']['#value'])) {
      $message_required = '<p>' . t('Required fields are marked with a star and can be found in the "Practical information" field group.') . '</p>';
      drupal_set_message($message_required);
    }

    // Assist on lacking image.
    if ($form_state['field']['field_image'][LANGUAGE_NONE]['items_count'] == 0) {
      $message_image = '<p>' . t('You will need to add an image to your course, before the content can be published.') . '</p>';
      drupal_set_message($message_image);
    }

    // Latest moderation log.
    if (!empty($form['vid']['#value'])) {
      $latest_log_message = t('Latest message') . ': ' . _ulf_forms_fetch_moderation_log_latest($form['vid']['#value']);
      drupal_set_message($latest_log_message);
    }

    $form['#prefix'] = '<div class="node--form is-default-form">';
    $form['#suffix'] = '</div>';


    $form['#submit'][] = '_custom_redirect_node_form_submit';

    break;


  // Course educators node form.
  case 'course_educators_node_form':
    $form['#prefix'] = '<div class="node--form is-default-form">';
    $form['#suffix'] = '</div>';
    break;

  // User anonymous forms (Login, request pass and create account)
  case 'user_pass':
    $form['#prefix'] = '<div class="form-module--user-login">';
    $form['#suffix'] = '</div>';
    $form['actions']['submit']['#attributes']['class'][] = 'form-module--user-submit';
    break;

  case 'user_register_form':
    $form['#prefix'] = '<div class="form-module--user-login">';
    $form['#suffix'] = '</div>';
    $form['actions']['submit']['#attributes']['class'][] = 'form-module--user-submit';
    break;

  case 'user_profile_form':
    global $user;
    if ($user->uid != 1 ) {
        $form['mimemail']['#access'] = FALSE;
        $form['locale']['#access'] = FALSE;
    }
    break;
  case 'user_login':
    $form['#prefix'] = '<div class="form-module--user-login">';
    $form['#suffix'] = '</div>';
    $form['actions']['submit']['#attributes']['class'][] = 'form-module--user-submit';
    break;
  }
}


/**
 * Implements hook_wysiwyg_editor_settings_alter().
 *
 * Set wysiwyg textarea height.
 */
function ulf_forms_wysiwyg_editor_settings_alter(&$settings, $context) {
  if($context['profile']->editor == 'ckeditor') {
    $settings['height'] = 200;
  }
}


/**
 * Fetch the latest moderation log.
 */
function _ulf_forms_fetch_moderation_log_latest($vid) {
  $result = db_select('node_revision', 'n')
    ->fields('n', array('log'))
    ->condition('vid', $vid,'=')
    ->execute()
    ->fetchAssoc();
  return $result['log'];
}


/**
 * Add custom redirect on node/edit form submit.
 */
function _custom_redirect_node_form_submit($form, &$form_state) {
  if (!empty($form_state['node']->nid)) {
    $_GET['destination'] = 'node/' . $form_state['node']->nid . '/edit';
  }
}


/**
 * Implements hook_node_insert().
 *
 * Set destination to node edit form when new node has been added.
 *
 * @todo, Find a better way.
 */

function ulf_forms_node_insert($node) {
  if($node->is_new) {
    $_GET['destination'] = 'node/' . $node->nid . '/edit';
  }
}