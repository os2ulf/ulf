<?php
/**
 * @file
 * Code for the Transportpulje form feature.
 */

include_once 'transportpulje_form.features.inc';
//include_once 'transportpulje_form.distance.inc';
include_once 'transportpulje_form.tpf-options.inc';

/**
 * Implements hook_menu().
 */
function transportpulje_form_menu() {
  $items['tpf/node/get/ajax/%'] = array(
    //'page callback' => 'transportpulje_form_ajax_get_ajax',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'transportpulje_form_ajax_callback',
  );

  $items['transport_application'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('transportpulje_form_add_application'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Cleanup taxonomy_term_form for institutions.
 */
function transportpulje_form_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if ($form['#bundle'] == 'tpf_institutions_list') {
    $form['description']['#access'] = FALSE;
    $form['relations']['#access'] = FALSE;
    $form['path']['#access'] = FALSE;
  }
}

function transportpulje_form_add_application($form, &$form_state) {
  // Variables.
  $show_part = isset($form_state['clicked_button']) ? 'part_two' : 'part_one';

  // General form setup.
  drupal_add_js(drupal_get_path('module', 'transportpulje_form'). '/js/form.js');
  drupal_add_js(array('transportpulje_form' => array('key' => 'value')), 'setting');
  drupal_add_css(drupal_get_path('module', 'transportpulje_form'). '/css/form.css');

  // Add fields
  $form['fields'] = array('#type' => 'container');

  // Create part one.
  $form['fields']['part_one'] = array(
    '#type' => 'container',
    '#weight' => 1,
  );
  $form['fields']['part_one']['select_course'] = array('#type' => 'fieldset', '#title' => t('Select course'));
  $form['fields']['part_one']['select_institution'] = array('#type' => 'fieldset', '#title' => t('Select institution'));

  // Add fields to course wrapper.
  $form['fields']['part_one']['select_course']['course_dropdown'] = array(
    '#title' => t('Select course'),
    '#type' => 'select',
    "#empty_option"=>t('- Select -'),
    '#size' => 15,
    '#options' => entityreference_get_selection_handler(field_info_field('field_tpf_course_select'))->getReferencableEntities(),
    '#default_value' => isset($form_state['values']['course_dropdown']) ? $form_state['values']['course_dropdown'] : '',
    '#name' => 'course_dropdown',
    '#states' => array(
      'required' => array(
        ':input[name="course_not_found"]' => array('unchecked' => TRUE)
      ),
    ),

  );
  $form['fields']['part_one']['select_course']['course_not_found'] = array(
    '#title' => t('I could not find the course'),
    '#type' => 'checkbox'
  );

  $form['fields']['part_one']['select_course']['course_what'] = array(
    '#title' => t('What is the course'),
    '#type' => 'textarea',
    '#default_value' => isset($form_state['values']['course_what']) ? $form_state['values']['course_what'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="course_not_found"]' => array('checked' => TRUE)
      ),
      'required' => array(
        ':input[name="course_not_found"]' => array('checked' => TRUE)
      ),
    ),
  );
  $form['fields']['part_one']['select_course']['course_description'] = array(
    '#title' => t('Describe the learning target'),
    '#type' => 'textarea',
    '#default_value' => isset($form_state['values']['course_description']) ? $form_state['values']['course_description'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="course_not_found"]' => array('checked' => TRUE)
      ),
      'required' => array(
        ':input[name="course_not_found"]' => array('checked' => TRUE)
      ),
    ),
  );
  $form['fields']['part_one']['select_course']['course_address'] = array(
    '#title' => t('Type the address of the course'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['values']['course_address']) ? $form_state['values']['course_address'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="course_not_found"]' => array('checked' => TRUE)
      ),
      'required' => array(
        ':input[name="course_not_found"]' => array('checked' => TRUE)
      ),
    ),
  );

  // Add fields to select institution.
  $form['fields']['part_one']['select_institution']['institution_type'] = array(
    '#title' => t('Type'),
    '#type' => 'select',
    "#empty_option"=>t('- Select -'),
    '#size' => 15,
    '#options' => list_allowed_values(field_info_field('field_tpf_institution_type')),
    '#required' => TRUE,
    '#default_value' => isset($form_state['values']['institution_type']) ? $form_state['values']['institution_type'] : '',
  );
  $form['fields']['part_one']['select_institution']['institution_name'] = array(
    '#title' => t('Institution'),
    '#type' => 'select',
    "#empty_option"=>t('- Select -'),
    '#options' => taxonomy_allowed_values(field_info_field('field_tpf_institution')),
    '#required' => TRUE,
    '#default_value' => isset($form_state['values']['institution_name']) ? $form_state['values']['institution_name'] : '',
  );
  $form['fields']['part_one']['select_institution']['institution_grade'] = array(
    '#title' => t('Select grade'),
    '#type' => 'select',
    "#empty_option"=>t('- Select -'),
    '#options' => list_allowed_values(field_info_field('field_tpf_grade')),
    '#default_value' => isset($form_state['values']['institution_grade']) ? $form_state['values']['institution_grade'] : '',
  );

  $form['fields']['part_two'] = array(
    '#prefix' => '<div id="part_two">',
    '#type' => 'container',
    '#weight' => 4,
    '#suffix' => '</div>',
  );

  // Add button for calculation.
  $form['fields']['transportpulje_calculate'] = array(
    '#type' => 'button',
    '#value' => t('Create transport request'),
    '#weight' => 1,
    '#name' => '_transportpulje_calculate',
    '#ajax' => array(
      'callback' => '_transportpulje_form_calculate_conditions',
      'wrapper' => 'part_two',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#executes_submit_callback' => TRUE,
  );

  // Add message wrapper.
  $form['fields']['part_two']['message_wrapper'] = array(
    '#type' => 'container',
    '#weight' => 1,
  );
  $form['fields']['part_two']['message_wrapper']['messages'] = array();

  $form['fields']['part_two']['transport'] = array(
    '#prefix' => '<div class="is-hidden">',
    '#type' => 'fieldset',
    '#title' => t('Transport information'),
    '#suffix' => '</div>',
    '#weight' => 2,
  );
  $form['fields']['part_two']['contact'] = array(
    '#prefix' => '<div class="is-hidden">',
    '#type' => 'fieldset',
    '#title' => t('Contact information'),
    '#suffix' => '</div>',
    '#weight' => 3,
  );

  // Add fields for transport information.
  $form['fields']['part_two']['transport']['expenses'] = array(
    '#title' => t('Expenses'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['values']['expenses']) ? $form_state['values']['expenses'] : '',
  );
  $form['fields']['part_two']['transport']['participants'] = array(
    '#title' => t('Participants'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['values']['participants']) ? $form_state['values']['participants'] : '',
  );
  $form['fields']['part_two']['transport']['date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'd/m/Y',
    '#default_value' => isset($form_state['values']['date']) ? $form_state['values']['date'] : '',
    '#weight' => 1
  );

  // Add fields to contact information.
  $form['fields']['part_two']['contact']['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['values']['name']) ? $form_state['values']['name'] : '',
  );
  $form['fields']['part_two']['contact']['phone'] = array(
    '#title' => t('Phone'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['values']['phone']) ? $form_state['values']['phone'] : '',
  );
  $form['fields']['part_two']['contact']['email'] = array(
    '#title' => t('Email'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['values']['email']) ? $form_state['values']['email'] : '',
  );
  $form['fields']['part_two']['contact']['email_repeat'] = array(
    '#title' => t('Repeat email'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['values']['email_repeat']) ? $form_state['values']['email_repeat'] : '',
  );
  $form['fields']['part_two']['contact']['description'] = array(
    '#title' => t('Short description'),
    '#type' => 'textarea',
    '#default_value' => isset($form_state['values']['description']) ? $form_state['values']['description'] : '',
  );

  $form['#validate'] = array('_tpf_states_required_form_validate');
  $form['fields']['submit_wrapper'] = array('#type' => 'container', '#weight' => 5);
  $form['fields']['submit_wrapper']['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Send application'),
    '#weight' => 1,
  );

  return $form;
}

/**
 * Calculate transport based on entered values.
 */

function _transportpulje_form_calculate_conditions($form, &$form_state) {
  $text = 'Bem√¶rk lorem ipsum 3 2 1 lorem ipsum  1 2 3 asdfdgd ds da';
  $passed = isset($form_state['input']['course_dropdown']) ? TRUE : FALSE;

  if (!empty(form_get_errors())) {
    $passed = FALSE;
  }
  if ($passed) {
    $form_state['rebuild'] = TRUE;
    $form['fields']['part_two']['#prefix'] = '<div id="part_two" class="has-passed">';
    unset($form['fields']['part_two']['transport']['#prefix']);
    unset($form['fields']['part_two']['transport']['#suffix']);
    unset($form['fields']['part_two']['contact']['#prefix']);
    unset($form['fields']['part_two']['contact']['#suffix']);

    $form['fields']['part_two']['message_wrapper']['#prefix'] = '<div class="message">';
    $form['fields']['part_two']['message_wrapper']['#suffix'] = '</div>';

    $form_values = $form_state['values'];
    $type = _tpf_get_type($form_values);
    switch ($type) {
      case 'denied_private' :
        $text = 'Denied because you are private';
        break;

      case 'denied_distance' :
        $text = 'Denied because of distance';
        break;

      case 'is_private' :
        $text = 'Text A - Fri transport';
        break;

      case 'is_not_course' :
        $text = 'Text B - Henvisning til mulig arragementsliste';
        break;

      case 'has_no_district' :
        $text = 'Text A - Fri transport';
        break;

      case 'not_part_of_course_list' :
        $text = 'Text A - Fri transport';
        break;

      case 'part_of_course_list' :
        $text = 'Text district X - Afh. af skoledistrikt';
        break;

      default:
        $text = t('Error!');
    }

    $form['fields']['part_two']['message_wrapper']['messages']['#markup'] = $text;
  }

  $form_state['rebuild'] = TRUE;
  return $form['fields']['part_two'];
}


function _tpf_states_required_form_validate($form, &$form_state) {
  // Check for required field specified in the states array
  foreach($form['fields']['part_one']['select_course'] as $key => $field) {
    if(is_array($field) && isset($field['#states']['required'])) {
      $required = false;
      foreach($field['#states']['required'] as $cond_field_sel => $cond_vals) {
        // Look for name= in the jquery selector - if that isn't there then give up (for now)
        preg_match('/name="(.*)"/', $cond_field_sel, $matches);

        if(isset($matches[1])) {
          // Get value identifier (e.g. value, tid, target_id)
          $value_ident = key($cond_vals);

          // Loop over the values of the conditional field
          foreach($form_state['values'] as $cond_field_val => $value) {
            // Reverse for course_dropdown field
            if (array_key_exists('unchecked', $cond_vals) && $form_state['values'][$matches[1]] == '0') {
              $required = true;
              break 2;
            }
            // Check for a match
            if(array_key_exists('checked', $cond_vals) && $cond_vals[$value_ident] == $form_state['values'][$matches[1]]) {
              // Now we know this field is required
              $required = true;
              break 2;
            }
          }
        }
      }

      if($required) {
        $field_name = $field['#name'];
        if(empty($form_state['values'][$field_name])) {
          form_set_error($field_name, t(':field is a required field', array(':field' => $field['#title'])));
        }
      }
    }
  }
}


/**
 * @param $form
 * @param $form_state
 */
function transportpulje_form_add_application_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#name'] == 'op') {
    $entityform = entity_create('entityform', array(
      'type' => "transportpulje_form",
      'created' => time(),
      'changed' => time(),
      'language' => LANGUAGE_NONE,
    ));

    // We simplify our lifes using Entity API.
    $wrapper = entity_metadata_wrapper('entityform', $entityform);
    $form_state['values']['course_dropdown'];
    // And set the fields.
    $wrapper->field_tpf_course_select = $form_state['values']['course_dropdown'];
    $wrapper->field_tpf_course_not_found = $form_state['values']['course_not_found'];
    $wrapper->field_tpf_what_course = $form_state['values']['course_what'];
    $wrapper->field_tpf_purpose_course = $form_state['values']['course_description'];
    $wrapper->field_tpf_address = $form_state['values']['course_address'];
    $wrapper->field_tpf_institution_type = $form_state['values']['institution_type'];
    $wrapper->field_tpf_institution = $form_state['values']['institution_name'];
    $wrapper->field_tpf_grade = $form_state['values']['institution_grade'];
    $wrapper->field_tpf_expense = $form_state['values']['expenses'];
    $wrapper->field_tpf_participants = $form_state['values']['participants'];
    $wrapper->field_tpf_date = strtotime($form_state['values']['date']);
    $wrapper->field_tpf_name = $form_state['values']['name'];
    $wrapper->field_tpf_phone = $form_state['values']['phone'];
    $wrapper->field_tpf_email = $form_state['values']['email'];
    $wrapper->field_tpf_email_repeat = $form_state['values']['email_repeat'];
    $wrapper->field_tpf_message = $form_state['values']['description'];

    $wrapper->save();
  }
}