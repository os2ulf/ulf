<?php
/**
 * @file
 * Code for the Transportpulje form feature.
 */

include_once 'transportpulje_form.features.inc';
include_once 'transportpulje_form.backend.inc';
include_once 'transportpulje_form.dropdown.inc';
include_once 'transportpulje_form.form.inc';
include_once 'transportpulje_form.mail.inc';

/**
 * Implements hook_menu().
 */
function transportpulje_form_menu() {
  $items['transport_application'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('transportpulje_form_add_application'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'transportpulje_form.form.inc',
    'file path' => drupal_get_path('module', 'transportpulje_form'),
  );

  $items['fetch-address/%node'] = array(
    'access arguments' => array('access content'),
    'page callback' => '_tpf_fetch_address',
    'page arguments' => array(1),
    'delivery callback' => '_tpf_fetch_address_output',
    'type' => MENU_CALLBACK,
    'file' => 'transportpulje_form.dropdown.inc',
    'file path' => drupal_get_path('module', 'transportpulje_form'),
  );

  $items['transport_application/sent'] = array(
    'page callback' => '_tpf_transport_application_sent',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => '_tpf_transport_application_sent_output',
  );

  $items['admin/settings/custom/transport/applications'] = array(
    'title' => t('Applications'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/settings/custom/transport/form'] = array(
    'title' => t('Create application'),
    'page callback' => '_tpf_form_wrapper',
    'page arguments' => array('transportpulje_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer tpf'),
  );

  $items['admin/settings/custom/transport/texts'] = array(
    'title' => t('Help texts'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('transportpulje_form_backend'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer tpf'),
    'file' => 'transportpulje_form.backend.inc',
		'file path' => drupal_get_path('module', 'transportpulje_form'),
  );

  return $items;
}

/**
 * Add actions to Views bulk operations.
 *
 * Implements hook_action_info().
 */
function transportpulje_form_action_info() {
  $actions['_tpf_change_status_accepted'] = array(
    'type' => 'entityform',
    'label' => t('Change status to accepted (No mail)'),
    'configurable' => FALSE,
    'triggers' => array('any'),
    'behavior' => array('changes_property'),
    'vbo_configurable' => FALSE,
    'pass rows' => TRUE,
  );

  $actions['_tpf_change_status_refused'] = array(
    'type' => 'entityform',
    'label' => t('Change status to refused (No mail)'),
    'configurable' => FALSE,
    'triggers' => array('any'),
    'behavior' => array('changes_property'),
    'vbo_configurable' => FALSE,
    'pass rows' => TRUE,
  );

  $actions['_tpf_accept'] = array(
    'type' => 'entityform',
    'label' => t('Accept (With mail)'),
    'configurable' => FALSE,
    'triggers' => array('any'),
    'behavior' => array('changes_property'),
    'vbo_configurable' => FALSE,
    'pass rows' => TRUE,
  );

  $actions['_tpf_refuse'] = array(
    'type' => 'entityform',
    'label' => t('Refuse (With mail)'),
    'configurable' => FALSE,
    'triggers' => array('any'),
    'behavior' => array('changes_property'),
    'vbo_configurable' => FALSE,
    'pass rows' => TRUE,
  );

  return $actions;
}

/**
 * Custom action for bulk operation. (Accepted)
 *
 * @param $entity
 */
function _tpf_change_status_accepted($entity) {
  _tpf_change_entity($entity, 'accepted');
}

/**
 * Custom action for bulk operation. (Accepted and send mail)
 *
 * @param $entity
 */
function _tpf_accept($entity) {
  _tpf_change_entity($entity, 'accepted_mail');
}

/**
 * Custom action for bulk operation. (Refused)
 *
 * @param $entity
 */
function _tpf_change_status_refused($entity) {
  _tpf_change_entity($entity, 'refused');
}

/**
 * Custom action for bulk operation. (Refused and send mail)
 *
 * @param $entity
 */
function _tpf_refuse($entity) {
  _tpf_change_entity($entity, 'refused_mail');
}

/**
 * Set status and send mail based on action selected.
 *
 * @param $entity
 * @param $action
 */
function _tpf_change_entity($entity, $action) {
  $wrapper = entity_metadata_wrapper('entityform', $entity);
  switch ($action) {
    case 'accepted' :
      $wrapper->field_tpf_status = 'accepted';
      $wrapper->save();
      break;
    case 'accepted_mail' :
      $wrapper->field_tpf_status = 'accepted';
      $wrapper->save();
      _transportpulje_form_notify($wrapper, 'on_change_accepted');
      break;
    case 'refused' :
      $wrapper->field_tpf_status = 'refused';
      $wrapper->save();
      break;
    case 'refused_mail' :
      $wrapper->field_tpf_status = 'refused';
      $wrapper->save();
      _transportpulje_form_notify($wrapper, 'on_change_refused');
      break;
  }
}

/**
 * Display form in backend.
 *
 * @param $bundle
 * @return bool|string
 */
function _tpf_form_wrapper($bundle) {
  module_load_include('inc', 'entityform', 'entityform.admin');

  return entityform_type_submit_page(entityform_type_load($bundle));
}

/**
 * Add new permission
 *
 * @return array
 */
function transportpulje_form_permission() {
  return array(
    'administer tpf' => array(
      'title' => t('Administer transport applications'),
      'description' => t('Perform administration tasks for transportpulje form module.'),
    ),
  );
}

/**
 * Add new role
 *
 * @return array
 */
function transportpulje_form_secure_permissions_roles() {
  return array(
    'transport pool editor',
  );
}

/**
 * Add tpf related permissions to roles.
 * 
 * @param $role
 * @return mixed
 */
function transportpulje_form_secure_permissions($role) {
  $permissions = array(
    'transport pool editor' => array(
      'view the administration theme',
      'administer tpf',
      'view any entityform',
      'edit any entityform',
    ),
    'editor' => array(
      'administer tpf',
      'view any entityform',
      'edit any entityform',
    ),
  );
  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Add help text to transport application editors.
 */
function transportpulje_form_form_user_profile_form_alter(&$form, &$form_state) {
  if (in_array('transport pool editor', $form['#user']->roles)) {
    drupal_set_message('<a href="/admin/settings/custom/transport">' . t("Click to access transport application list") . '</a>', 'Status');
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Hide transport fields for most users and on youth items.
 */
function transportpulje_form_form_course_node_form_alter(&$form, &$form_state, $form_id) {
  $user = $GLOBALS['user'];
  $youth_term_id = key(taxonomy_get_term_by_name('Ungdomsuddannelse', 'target_group'));
  $form['#attached'] = array(
    'js' => array(
      array(
        'type' => 'file',
        'data' => drupal_get_path('module', 'transportpulje_form'). '/js/course-form-alter.js',
      ),
      array(
        'type' => 'setting',
        'data' => array('user' => $user, 'target_group' => $youth_term_id)),
    )
  );
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Cleanup taxonomy_term_form for institutions.
 */
function transportpulje_form_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if ($form['#bundle'] == 'tpf_institutions_list') {
    $form['description']['#access'] = FALSE;
    $form['relations']['#access'] = FALSE;
    $form['path']['#access'] = FALSE;
  }
}

/**
 * Provide variable for confirmation page.
 *
 * @return mixed
 */
function _tpf_transport_application_sent() {
  return variable_get('confirmation', array('value' => '', 'format' => NULL))['value'];
}

/**
 * Provide html for confirmation page.
 *
 * @return mixed
 */
function _tpf_transport_application_sent_output($output) {
  drupal_deliver_html_page($output);
}

/**
 * Add css file to entityform submission display. And node display.
 *
 * @param $variables
 */
function transportpulje_form_preprocess(&$variables) {
  if (isset($variables['entity_type']) && $variables['entity_type'] == 'entityform') {
    if(isset($variables['view_mode']) && $variables['view_mode'] == 'full') {
      if(isset($variables['elements']['#bundle']) && $variables['elements']['#bundle'] == 'transportpulje_form') {
        drupal_add_css(drupal_get_path('module', 'transportpulje_form'). '/css/form.css');
      }
    }
  }
}

function transportpulje_form_preprocess_node(&$variables) {
  if ($variables['type'] == 'course' && $variables['view_mode'] == 'full') {
    drupal_add_css(drupal_get_path('module', 'transportpulje_form'). '/css/form.css');
  }
}