<?php
/**
 * @file
 * Code for the ULF Search feature.
 */

include_once 'ulf_search.features.inc';

/**
 * Implements hook_install().
 *
 * jQuery version check.
 */
function ulf_search_install() {
  // Check jQuery version.
  $jquery_version = variable_get('jquery_update_jquery_version', 1.5);

  // Update jQuery version to version 1.9.
  if ($jquery_version < 1.9) {
    variable_set('jquery_update_jquery_version', 1.9);
  }

  // Check jQuery admin pages version.
  $jquery_admin_version = variable_get('jquery_update_jquery_admin_version', 1.5);

  // Update jQuery admin pages to version 1.8.
  if ($jquery_admin_version < 1.8) {
    variable_set('jquery_update_jquery_admin_version', 1.8);
  }
}

/**
 * Return every node of type post in JSON format.
 *
 * @return string
 *   JSON object.
 */
function ulf_search_nodes() {
  // Select nodes.
  $nodes = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('status', 1)
    ->execute();

  // Build nodes.
  $data = array();
  foreach ($nodes as $node) {
    $data[] = array(
      // For better search, use strtolower.
      'value' => strtolower(trim($node->title)),
      // Fine human output.
      'title' => trim($node->title),
      // Use internal path.
      'link' => '/'. drupal_get_path_alias('node/' . $node->nid),
    );
  }

  // Return as JSON.
  drupal_json_output($data);
}

/**
 * Implements hook_init().
 *
 * Include search JS for every pageload!
 */
function ulf_search_init() {
  drupal_add_js(drupal_get_path('module', 'ulf_search') . '/handlebars-v1.2.0.js');
  drupal_add_js(drupal_get_path('module', 'ulf_search') . '/typeahead.bundle.js');
  drupal_add_js(drupal_get_path('module', 'ulf_search') . '/ulf_search.js');
}

/**
 * Implements hook_menu().
 */
function ulf_search_menu() {
  $items['ulf_search_nodes'] = array(
    'title' => 'List nodes in JSON format',
    'page callback' => 'ulf_search_nodes',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter search form for Twitter Typeahead and html.
 */
function ulf_search_form_search_api_page_search_form_alter(&$form, &$form_state) {
  // Fetch search page id

  $default_page_id = db_query("SELECT id FROM {search_api_page} WHERE index_id = 'default'")->fetchField();

  // Used for search block.
  switch ($form['#form_id'])  {
    case "search_api_page_search_form_default" :
      // Add class to submit.
      $form['submit_' . $default_page_id]['#attributes']['class'][] = 'header-search-module--submit';

      // Inline styling needed for Twitter Typeahead.
      $form['keys_' . $default_page_id]['#attributes']['class'][] = 'form-search';
      $form['keys_' . $default_page_id]['#attributes']['style'] = "position: relative; vertical-align: top; background-color: transparent;";

      // Default placeholder.
      $form['keys_' . $default_page_id]['#attributes']['placeholder'] =  t('E.g movies, music etc.');

      // Yet again, some id and classes for Twitter Typehead.
      $form['keys_' . $default_page_id]['#attributes']['id'][] = 'typeahead';
      $form['keys_' . $default_page_id]['#attributes']['class'][] = 'typeahead';
      $form['keys_' . $default_page_id]['#attributes']['class'][] = 'tt-query';
      break;

    // Used for search page.
    case "search_api_page_search_form" :
      // Add class to submit.
      $form['form']['keys_' . $default_page_id]['#title'] = '<h1 class="page-title">' . t('Search result') . ': ' .  $form_state['build_info']['args']['1'] . '</h1>';
      $form['form']['#prefix'] = '<div class="search-module--form">';
      $form['form']['#suffix'] = '</div>';
      $form['form']['submit_' . $default_page_id]['#attributes']['class'][] = 'search-module--submit';

      // Inline styling needed for Twitter Typeahead.
      $form['form']['keys_' . $default_page_id]['#attributes']['class'][] = 'form-search';
      $form['form']['keys_' . $default_page_id]['#attributes']['style'] = "position: relative; vertical-align: top; background-color: transparent;";

      // Default placeholder.
      $form['form']['keys_' . $default_page_id]['#attributes']['placeholder'] =  t('E.g movies, music etc.');

      // Yet again, some id and classes for Twitter Typehead.
      $form['form']['keys_' . $default_page_id]['#attributes']['id'][] = 'typeahead';
      $form['form']['keys_' . $default_page_id]['#attributes']['class'][] = 'typeahead';
      $form['form']['keys_' . $default_page_id]['#attributes']['class'][] = 'tt-query';
      break;
  }
}

